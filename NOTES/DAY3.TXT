Day 3 5/23/2020
===============
In this day, we took a detailed look at the graphics functions and modes
and we also started our graphics library.  I also put a lot of effort into
making sure my MSC/C++ environment was working properply and wrote makefiles
for mech wars.  

I experimented a fair bit with modifications to Mech War during my reading.
In order to do this, I had to copy the game library into the day_02 folder.
This is the folder which holds my modified version of the game.

I got a little side tracked in these adventures, and so it really took 
a few days for me to get through day 3!

Exercises
=========
1. Using the game library, write a program which plots a pixel on the screen
   and makes it glow red.
   
   I used dots.c as a basis for this.  Making the red pixel was pretty 
   easy, so I made some additional enhancments.  First, I made it a 3x3 
   square so it would be easier to see.  Second, I made it cycle through
   a few shades of red hoping for a glowing type effect.  It didn't look
   all that great, so perhaps I need to revisit this later on!
   
   Revised!  I made a nice little pallette effect routine for changing the
   intensity of the down and then up.  It now has a nice pulsing effect.
   
2. Profile the difference between the two pixel-plotting functions Plot_Pixel
   and Plot_Pixel_Fast().  Hint: write a program that plots 1,000,000 or so
   pixels with each version, and record their speed difference.
   
   I wrote a little program in day_03 called profile.exe.  This first
   does the fast one for 1,000,000 pixels and then the slow one.  In between,
   it resets the mode and has you press a key.  The fast one took 4 seconds,
   and the slow one took 3 seconds!  
   
   I think this is likely an artifcat of the dosbox simulation.  I set the
   number of CPU cycles to a rate which had it run at 486 speeds, but it 
   still doesn't do precise timings in terms of how long each instruction
   takes to execute, so it kind of masks ineffeciencies.
   
   I should get some real period hardware to try this out for real!
   
3. Rewrite the Blit_Char() function so it draws each character in two colors.

   I wasn't quite sure what was asked for in this exercise, so I made it 
   draw alternating rows of the characters in alternating colors.  I also
   made a new version of Blit_String so I could write a friendly message
   in color bands.  This is in the file "blit2.c".

4. Write a program that slowly decreases the intesnity of all colors in each
   color register until each register has all zeroes in it.
   
   This one was pretty straightforward.  I filled the screen with random 
   pixels and then wrote a loop where I kept decrmenting the color 
   coordinates.  I could have done some pointer stuff to make it cleaner,
   but the effect works either way.  This is in "fade.c"
   
5. Try to make Plot_Pixel_Fast() even faster!

   Given what I discovered about my simulated hardware, I don't think this
   would be a terribly meaningful exercise.  Perhaps after I build a proper
   DOS rig, I'll give this one a go!

6. Using the keyboard as an input device, try to make a crude drawing 
   program that allows the user to change colors and move a pen on the
   screen.
   
   I maybe went a bit overboard here, but I made it display a little 
   pallette with numbers.  Number keys select the color, arrow keys move
   the pixel about.  ESC exits.  This is in the file "draw.c"
   
   In order to build this, I wrote two other programs to fascilitate 
   my efforts.  First, I wrote keycode.c which displays the numbers sent
   in the keyboard interrupt.  Second, I wrote vgapal.c which displays the
   default vga pallette.  I put both of these in my system path as I 
   believe they will prove useful on other days.
   
   For the keyboard input, I used the interrupt handler from Mech Wars,
   though with modified key responses.
   
   On the whole, this was a fun (ableit time consuming) endeavor.
   
7. Write a program that bounces a single pixel around on the screen
   without leaving a trail.
   
   Done!  This was pretty straightforward, and the code is in "bounce.c"
   
8. Close this book and watch a rerun of Star Trek: The Next Generation!

   This being 2020, no such reruns are on TV at the moment.  Fortunately,
   we have Netflix.  So I streamed the classic episode "Q Who?", which is
   one of my favorites.  It was a welcome break.
