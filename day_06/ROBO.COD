; File robo.c
; 
; // I N C L U D E S ///////////////////////////////////////////////////////////
; 
; #include <io.h>
; #include <conio.h>
; #include <stdio.h>
; #include <stdlib.h>
; #include <dos.h>
; #include <bios.h>
; #include <fcntl.h>
; #include <memory.h>
; #include <malloc.h>
; #include <math.h>
; #include <string.h>
; 
; #include "graph3.h"  // include our graphics stuff
; #include "graph4.h"
; #include "graph6.h"
; 
; #define CELL_COLUMNS   10  // size of cell based matrix
; #define CELL_ROWS      6
; 
; #define CELL_WIDTH     32  // width of a cell in pixels
; #define CELL_HEIGHT    32  // height of a cell in pixels
; 
; #define NUM_SCREENS    6   // number of screens in game
; 
; #define ROBO_MOVE      8   // speed that the player moves at
; 
; #define NUM_STARS  75
; 
; // G L O B A L S  ////////////////////////////////////////////////////////////
; typedef struct star
; {
;     int x;
;     int y;
;     unsigned int plane;
;     unsigned char back;
; } star;
; 
; pcx_picture imagery_pcx,   // used to load in the imagery for robopunk
;             intro_pcx;     // the intro screen
; 
; sprite back_cells,  // background cells sprite
;        robopunk;    // robopunk
; 
; // use an array of 2-D matrices to hold the screens
; 
; char **universe[NUM_SCREENS] = {NULL,NULL,NULL,NULL,NULL,NULL};
; 
; // here is screen 1, note: it's 10x6 cells where each cell is represented
; // by an ASCII character (makes it easier to draw each screen by hand).
; // later the ASCII characters will be translated to bitmap id's so that
; // the screen image can be drawn
; 
; char *screen_1[CELL_ROWS] = {"           ",
;                              "##*###*####",
;                              "###########",
;                              "<==========",
;                              "######:####",
;                              "####<=;=>##"};
; 
; 
; char *screen_2[CELL_ROWS] = {"      ###  ",
;                              "      #:#  ",
;                              "#######:###",
;                              "=======;===",
;                              "#<==>######",
;                              "###########"};
; 
; 
; char *screen_3[CELL_ROWS] = {"      ##<=>",
;                              "  #*##<==>#",
;                              "####*######",
;                              "===========",
;                              "###########",
;                              "###########"};
; 
; 
; 
; char *screen_4[CELL_ROWS] = {"###        ",
;                              "#<=>##     ",
;                              "####<==>###",
;                              "===========",
;                              "###########",
;                              "#<==>######"};
; 
; 
; 
; char *screen_5[CELL_ROWS] = {"   #<=>#   ",
;                              " #:#***#:##",
;                              "##:#####:##",
;                              "==;=====;==",
;                              "###########",
;                              "###########"};
; 
; 
; char *screen_6[CELL_ROWS] = {"           ",
;                              "##         ",
;                              "#*#*##     ",
;                              "========>  ",
;                              "#########  ",
;                              "#########  "};
; 
; unsigned char star_color[] = {8, 7, 15};
; int star_dx[] = {2, 4, 6};
; int star_dy[] = {0, 0, 0};
; star stars[NUM_STARS];
; 
; // P R O T O T Y P E S ////////////////////////////////////////////////////////
; void init_stars();
; void update_stars();
; 
; // F U N C T I O N S /////////////////////////////////////////////////////////
; 
; void Draw_Screen(char **screen)
; {
; Line 117
; screen = 0006
					_Draw_Screen:
	*** 000000	c8 00 00 00 		enter	OFFSET L00997,OFFSET 0
	*** 000004	56 			push	si
	*** 000005	57 			push	di
; curr_row = fffc
; index_y = fffa
; cell_number = fff8
; index_x = fff6
; // this function draws a screen by using the data in the universe array
; // each element in the universe array is a 2-D matrix of cells, these
; // cells are ASCII characters that represent the requested bitmap that
; // shoulf be placed in the cell location
; 
; char *curr_row;
; Line 123
; 
; int index_x, index_y, cell_number;
; Line 125
; 
; // translation table for screen database used to convert the ASCII
; // characters into id numbers
; 
; static char back_cell_lookup[] =
; Line 130
; 
;    { 0,0, 0, 4,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,1,2,3,0,
; Line 132
; // SP  !  " #  $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
; 
;     0,0,0,0,0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0 ,0,0,0,0,0,0 ,0, 0,0,0};
; Line 135
; //  @ A B C D E F G H I  J K L M  N O P Q R S T U  V W X Y Z [  \  ] ^ _
; 
; // clear out the double buffer
; 
; Fill_Double_Buffer(0);
; Line 140
	*** 000006	6a 00 			push	OFFSET 0
	*** 000008	9a 00 00 00 00 		call	FAR PTR _Fill_Double_Buffer
	*** 00000d	83 c4 02 		add	sp,OFFSET 2
; 
; // now draw the screen row by row
; 
; for (index_y = 0; index_y<CELL_ROWS; index_y++)
; Line 144
	*** 000010	c7 46 fa 00 00 		mov	WORD PTR -6[bp],OFFSET 0
	*** 000015	e9 00 00 		jmp	L00913
					L00910:
;     {
; Line 145
; 
;     // get the current row for speed
; 
;     curr_row = screen[index_y];
; Line 149
	*** 000018	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 00001b	d1 e0 			shl	ax,OFFSET 1
	*** 00001d	8b 5e 06 		mov	bx,WORD PTR 6[bp]
	*** 000020	03 d8 			add	bx,ax
	*** 000022	8b 07 			mov	ax,WORD PTR [bx]
	*** 000024	89 46 fc 		mov	WORD PTR -4[bp],ax
; 
;     // do the row
; 
;     for (index_x = 0; index_x<CELL_COLUMNS; index_x++)
; Line 153
	*** 000027	c7 46 f6 00 00 		mov	WORD PTR -10[bp],OFFSET 0
	*** 00002c	e9 00 00 		jmp	L00917
					L00914:
;         {
; Line 154
;         // extract cell out of data structure and blit it onto screen
; 
;         cell_number = back_cell_lookup[curr_row[index_x]-32];
; Line 157
	*** 00002f	8b 46 f6 		mov	ax,WORD PTR -10[bp]
	*** 000032	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000035	03 d8 			add	bx,ax
	*** 000037	8a 07 			mov	al,BYTE PTR [bx]
	*** 000039	98 			cbw
	*** 00003a	8b d8 			mov	bx,ax
	*** 00003c	83 c3 e0 		add	bx,OFFSET -32
	*** 00003f	8a 87 14 02 		mov	al,BYTE PTR ?back_cell_lookup@?1??Draw_Screen@@9@9[bx]
	*** 000043	98 			cbw
	*** 000044	89 46 f8 		mov	WORD PTR -8[bp],ax
; 
;         // compute the screen x and y
; 
;         back_cells.x = index_x * sprite_width;
; Line 161
	*** 000047	8b 46 f6 		mov	ax,WORD PTR -10[bp]
	*** 00004a	f7 2e 00 00 		imul	WORD PTR _sprite_width
	*** 00004e	a3 00 00 		mov	WORD PTR _back_cells,ax
;         back_cells.y = index_y * sprite_height;
; Line 162
	*** 000051	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 000054	f7 2e 00 00 		imul	WORD PTR _sprite_height
	*** 000058	a3 02 00 		mov	WORD PTR _back_cells+2,ax
; 
;         // figure out which bitmap to draw
; 
;         back_cells.curr_frame = cell_number;
; Line 166
	*** 00005b	8b 46 f8 		mov	ax,WORD PTR -8[bp]
	*** 00005e	a3 74 00 		mov	WORD PTR _back_cells+116,ax
; 
;         // draw the bitmap
; 
;         Draw_Sprite_DB((sprite_ptr)&back_cells);
; Line 170
	*** 000061	68 00 00 		push	OFFSET _back_cells
	*** 000064	9a 00 00 00 00 		call	FAR PTR _Draw_Sprite_DB
	*** 000069	83 c4 02 		add	sp,OFFSET 2
; 
;         } // end for index_x
; Line 172
					L00915:
; Line 172
	*** 00006c	83 46 f6 01 		add	WORD PTR -10[bp],OFFSET 1
					L00917:
	*** 000070	83 7e f6 0a 		cmp	WORD PTR -10[bp],OFFSET 10
	*** 000074	7d 03 e9 b6 ff 		jl	L00914
					L00916:
; 
;     } // end for index_y
; Line 174
					L00911:
; Line 174
	*** 000079	83 46 fa 01 		add	WORD PTR -6[bp],OFFSET 1
					L00913:
	*** 00007d	83 7e fa 06 		cmp	WORD PTR -6[bp],OFFSET 6
	*** 000081	7d 03 e9 92 ff 		jl	L00910
					L00912:
; 
; } // end Draw_Screen
; Line 176
; Line 176
					L00903:
	*** 000086	5f 			pop	di
	*** 000087	5e 			pop	si
	*** 000088	c9 			leave
	*** 000089	cb 			ret	OFFSET 0
Local Size: 10
; Line 0
; 
; //////////////////////////////////////////////////////////////////////////////
; 
; void Rotate_Lights(void)
; {
; 
; // this function useds color rotation to move the walkway lights
; // three color registers are used.
; // note: this function has static variables which track timing parameters
; // and also if the funtion has been entered yet.
; 
; static int clock=0,entered_yet=0;// used for timing, note: they are static!
; 
; RGB_color color,
;           color_1,
;           color_2,
;           color_3;
; 
; // this function blinks the running lights on the walkway
; 
; if (!entered_yet)
;    {
; 
;    // reset the palette registers 96,97,98 to red,
;    // black, black
; 
;    color.red   = 255;
;    color.green = 0;
;    color.blue  = 0;
; 
;    Set_Palette_Register(96,(RGB_color_ptr)&color);
; 
;    color.red = color.green = color.blue = 0;
; 
;    Set_Palette_Register(97,(RGB_color_ptr)&color);
;    Set_Palette_Register(98,(RGB_color_ptr)&color);
; 
;    // system has initialized, so flag it
; 
;    entered_yet=1;
; 
;    } // end if first time into function
; 
; // try and rotate the light colors i.e. color rotation
; 
;    if (++clock==3)  // is it time to rotate
;       {
;       // get the colors
; 
;       Get_Palette_Register(96,(RGB_color_ptr)&color_1);
;       Get_Palette_Register(97,(RGB_color_ptr)&color_2);
;       Get_Palette_Register(98,(RGB_color_ptr)&color_3);
; 
;       // set the colors
; 
;       Set_Palette_Register(97,(RGB_color_ptr)&color_1);
;       Set_Palette_Register(98,(RGB_color_ptr)&color_2);
;       Set_Palette_Register(96,(RGB_color_ptr)&color_3);
; 
;       // reset the clock
; 
;       clock=0;
; 
;       } // end if time to rotate
; 
; } // end Rotate_Lights
; 
; ///////////////////////////////////////////////////////////////////////////////
; 
; 
; // M A I N ////////////////////////////////////////////////////////////////////
; 
; void main(void)
; {
; 
; int index,
;     curr_screen=0,
;     done=0;
; int dy=0;
; 
; // S E C T I O N   1  /////////////////////////////////////////////////////////
; 
; // set video mode to 320x200 256 color mode
; Set_Video_Mode(VGA256);
; 
; // create a double buffer
; 
; if (!Create_Double_Buffer(SCREEN_HEIGHT))
;    {
;    printf("\nNot enough memory to create double buffer.");
; 
;    } // end if
; 
; // S E C T I O N   2  /////////////////////////////////////////////////////////
; 
; // load intro screen and display for a few secs.
; 
; PCX_Init((pcx_picture_ptr)&intro_pcx);
; 
; PCX_Load("roboint.pcx", (pcx_picture_ptr)&intro_pcx,1);
; 
; PCX_Show_Buffer((pcx_picture_ptr)&intro_pcx);
; 
; // let user see it
; 
; Delay(50);
; 
; PCX_Delete((pcx_picture_ptr)&intro_pcx);
; 
; // S E C T I O N   3  /////////////////////////////////////////////////////////
; 
; // load in background and animation cells
; 
; PCX_Init((pcx_picture_ptr)&imagery_pcx);
; 
; PCX_Load("robopunk.pcx", (pcx_picture_ptr)&imagery_pcx,1);
; 
; // initialize sprite size
; 
; sprite_width  = 32;
; sprite_height = 32;
; 
; // create a sprite for robopunk
; 
; Sprite_Init((sprite_ptr)&robopunk,0,0,0,0,0,0);
; 
; // create a sprite to hold the background cells
; 
; Sprite_Init((sprite_ptr)&back_cells,0,0,0,0,0,0);
; 
; // extract animation cells for robopunk
; 
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,0,3,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,1,5,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,2,4,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,3,5,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,4,6,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,5,1,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,6,2,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,7,1,0);
; PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&robopunk,8,0,0);
; 
; 
; // extract background cells
; 
; for (index=0; index<8; index++)
;     {
; 
;     PCX_Grab_Bitmap((pcx_picture_ptr)&imagery_pcx,(sprite_ptr)&back_cells,index,index,1);
; 
;     } // end for index
; 
; // done with pcx file so obliterate it
; 
; PCX_Delete((pcx_picture_ptr)&imagery_pcx);
; 
; // S E C T I O N   4  /////////////////////////////////////////////////////////
; 
; // set up universe data structure
; 
; universe[0] = (char **)screen_1;
; universe[1] = (char **)screen_2;
; universe[2] = (char **)screen_3;
; universe[3] = (char **)screen_4;
; universe[4] = (char **)screen_5;
; universe[5] = (char **)screen_6;
; 
; Draw_Screen((char **)universe[curr_screen]);
; Show_Double_Buffer(double_buffer);
; 
; init_stars();
; // place robopunk
; 
; robopunk.x = 160;
; robopunk.y = 74;
; 
; robopunk.curr_frame = 0;
; 
; // scan background under robopunk
; 
; Behind_Sprite_DB((sprite_ptr)&robopunk);
; Line 181
					_Rotate_Lights:
	*** 00008a	c8 00 00 00 		enter	OFFSET L00998,OFFSET 0
	*** 00008e	56 			push	si
	*** 00008f	57 			push	di
; color_2 = fffa
; color = fff6
; color_3 = fff2
; color_1 = ffee
; 
; // S E C T I O N   5  /////////////////////////////////////////////////////////
; 
; // main event loop
; 
; while(!done)
;      {
; Line 188
; 
; // S E C T I O N   6  /////////////////////////////////////////////////////////
; Line 190
; 
; Line 191
;      // erase robopunk
; Line 192
; 
; Line 193
;      Erase_Sprite_DB((sprite_ptr)&robopunk);
; 
;      update_stars();
; 
; Line 197
	*** 000090	83 3e 56 02 00 		cmp	WORD PTR ?entered_yet@?1??Rotate_Lights@@9@9,OFFSET 0
	*** 000095	74 03 e9 00 00 		jne	L00928
;      //move vertically (if needed)
; Line 198
;      if(dy) {
;      	robopunk.y += dy;
; 	dy+=1;
; 	if(robopunk.y >= 199-robopunk.height) {
; 	    done=1;
; Line 203
	*** 00009a	c6 46 f6 ff 		mov	BYTE PTR -10[bp],OFFSET 255
; 	    continue;
; Line 204
	*** 00009e	c6 46 f7 00 		mov	BYTE PTR -9[bp],OFFSET 0
; 	}
; Line 205
	*** 0000a2	c6 46 f8 00 		mov	BYTE PTR -8[bp],OFFSET 0
;      }
; 
; Line 207
	*** 0000a6	8d 46 f6 		lea	ax,WORD PTR -10[bp]
	*** 0000a9	50 			push	ax
	*** 0000aa	6a 60 			push	OFFSET 96
	*** 0000ac	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 0000b1	83 c4 04 		add	sp,OFFSET 4
;      // test if user has hit key
; 
; Line 209
	*** 0000b4	c6 46 f8 00 		mov	BYTE PTR -8[bp],OFFSET 0
	*** 0000b8	b0 00 			mov	al,OFFSET 0
	*** 0000ba	88 46 f7 		mov	BYTE PTR -9[bp],al
	*** 0000bd	88 46 f6 		mov	BYTE PTR -10[bp],al
;      if (kbhit())
;         {
; Line 211
	*** 0000c0	8d 46 f6 		lea	ax,WORD PTR -10[bp]
	*** 0000c3	50 			push	ax
	*** 0000c4	6a 61 			push	OFFSET 97
	*** 0000c6	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 0000cb	83 c4 04 		add	sp,OFFSET 4
;         // get the key
; Line 212
	*** 0000ce	8d 46 f6 		lea	ax,WORD PTR -10[bp]
	*** 0000d1	50 			push	ax
	*** 0000d2	6a 62 			push	OFFSET 98
	*** 0000d4	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 0000d9	83 c4 04 		add	sp,OFFSET 4
; 
; // S E C T I O N   7  /////////////////////////////////////////////////////////
; 
;         switch(getch())
; Line 216
	*** 0000dc	c7 06 56 02 01 00 	mov	WORD PTR ?entered_yet@?1??Rotate_Lights@@9@9,OFFSET 1
;               {
; 
; Line 218
;               case 'a': // move the player left
;                       {
;                       // advance the animation frame and move player
; 
; Line 222
					L00928:
	*** 0000e2	83 06 54 02 01 		add	WORD PTR ?clock@?1??Rotate_Lights@@9@9,OFFSET 1
	*** 0000e7	a1 54 02 		mov	ax,WORD PTR ?clock@?1??Rotate_Lights@@9@9
	*** 0000ea	3d 03 00 		cmp	ax,OFFSET 3
	*** 0000ed	74 03 e9 00 00 		jne	L00929
;                       // test if player is moving right, if so
; Line 223
;                       // show player turning before moving
; 
;                       if (robopunk.curr_frame > 0 && robopunk.curr_frame < 5)
; Line 226
	*** 0000f2	8d 46 ee 		lea	ax,WORD PTR -18[bp]
	*** 0000f5	50 			push	ax
	*** 0000f6	6a 60 			push	OFFSET 96
	*** 0000f8	9a 00 00 00 00 		call	FAR PTR _Get_Palette_Register
	*** 0000fd	83 c4 04 		add	sp,OFFSET 4
;                          {
; Line 227
	*** 000100	8d 46 fa 		lea	ax,WORD PTR -6[bp]
	*** 000103	50 			push	ax
	*** 000104	6a 61 			push	OFFSET 97
	*** 000106	9a 00 00 00 00 		call	FAR PTR _Get_Palette_Register
	*** 00010b	83 c4 04 		add	sp,OFFSET 4
;                          robopunk.curr_frame = 0;
; Line 228
	*** 00010e	8d 46 f2 		lea	ax,WORD PTR -14[bp]
	*** 000111	50 			push	ax
	*** 000112	6a 62 			push	OFFSET 98
	*** 000114	9a 00 00 00 00 		call	FAR PTR _Get_Palette_Register
	*** 000119	83 c4 04 		add	sp,OFFSET 4
;                          } // end if player going right
;                       else
;                       if (robopunk.curr_frame == 0 )
;                          robopunk.curr_frame = 5;
; Line 232
	*** 00011c	8d 46 ee 		lea	ax,WORD PTR -18[bp]
	*** 00011f	50 			push	ax
	*** 000120	6a 61 			push	OFFSET 97
	*** 000122	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 000127	83 c4 04 		add	sp,OFFSET 4
;                       else
; Line 233
	*** 00012a	8d 46 fa 		lea	ax,WORD PTR -6[bp]
	*** 00012d	50 			push	ax
	*** 00012e	6a 62 			push	OFFSET 98
	*** 000130	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 000135	83 c4 04 		add	sp,OFFSET 4
;                          {
; Line 234
	*** 000138	8d 46 f2 		lea	ax,WORD PTR -14[bp]
	*** 00013b	50 			push	ax
	*** 00013c	6a 60 			push	OFFSET 96
	*** 00013e	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 000143	83 c4 04 		add	sp,OFFSET 4
;                          // player is already in leftward motion so continue
; 
;                          if (++robopunk.curr_frame > 8)
;                             robopunk.curr_frame = 5;
; Line 238
	*** 000146	c7 06 54 02 00 00 	mov	WORD PTR ?clock@?1??Rotate_Lights@@9@9,OFFSET 0
; 
;                          // move player to left
; Line 240
; 
;                          robopunk.x-=ROBO_MOVE;
; Line 242
					L00929:
; Line 242
					L00919:
	*** 00014c	5f 			pop	di
	*** 00014d	5e 			pop	si
	*** 00014e	c9 			leave
	*** 00014f	cb 			ret	OFFSET 0
Local Size: 18
; Line 0
; 
;                          // test if edge was hit
; 
;                          if (robopunk.x < 8)
;                             {
;                             // test if there is another screen to the left
; 
;                             if (curr_screen==0)
;                                {
;                                robopunk.x += ROBO_MOVE;
;                                } // end if already at end of universe
;                             else
;                                {
;                                // warp robopunk to other edge of screen
;                                // and change screens
; 
;                                robopunk.x = SCREEN_WIDTH - 40;
; 
;                                // scroll to next screen to the left
; 
;                                curr_screen--;
; 
;                                Draw_Screen((char **)universe[curr_screen]);
; 
;                                } // end else move a screen to the left
; 
;                             } // end if hit left edge of screen
; 
;                          } // end else
; 
;                       } break;
; 
; 
;               case 's': // move the player right
;                       {
; 
;                       // advance the animation frame and move player
; 
;                       // test if player is moving left, if so
;                       // show player turning before moving
; 
;                       if (robopunk.curr_frame > 4)
;                          {
;                          robopunk.curr_frame = 0;
;                          } // end if player going right
;                       else
;                       if (robopunk.curr_frame == 0 )
;                          robopunk.curr_frame =1;
;                       else
;                          {
;                          // player is already in rightward motion so continue
; 
;                          if (++robopunk.curr_frame > 4)
;                             robopunk.curr_frame = 1;
; 
;                          // move player to right
; 
;                          robopunk.x+=ROBO_MOVE;
; 
;                          // test if edge was hit
; 
;                          if (robopunk.x > SCREEN_WIDTH-40)
;                             {
;                             // test if there is another screen to the left
; 
;                             if (curr_screen==5)
;                                {
;                                robopunk.x -= ROBO_MOVE;
; 			       dy=4;
;                                } // end if already at end of universe
;                             else
;                                {
;                                // warp robopunk to other edge of screen
;                                // and change screens
; 
;                                robopunk.x = 8;
; 
;                                // scroll to next screen to the right
; 
;                                curr_screen++;
; 
;                                Draw_Screen((char **)universe[curr_screen]);
; 
;                                } // end else move a screen to the right
; 
;                             } // end if hit right edge of screen
; 
;                          } // end else
; 
;                       } break;
; 
;               case 'q': // exit the demo
;                       {
;                       done=1;
; 
;                       } break;
; 
;               default:break;
; 
;               } // end switch
; 
; 
;         } // end if keyboard hit
; 
; // S E C T I O N   8  /////////////////////////////////////////////////////////
; 
;      // scan background under robopunk
; 
;      Behind_Sprite_DB((sprite_ptr)&robopunk);
; 
;      // draw him
; 
;      Draw_Sprite_DB((sprite_ptr)&robopunk);
; 
;      // do any background animation
; 
; // S E C T I O N   9  /////////////////////////////////////////////////////////
; 
;      // move the walkway lights
; 
;      Rotate_Lights();
; 
;      // show the double buffer
; 
;      Show_Double_Buffer(double_buffer);
; 
;      // wait a bit
; 
;      Delay(1);
; 
;      } // end while
; 
; // S E C T I O N   10 /////////////////////////////////////////////////////////
; 
; // use one of screen fx as exit
; 
; Disolve_Color(0x0c);
; Fade_Lights();
; 
; // reset the video mode back to text
; 
; Set_Video_Mode(TEXT_MODE);
; 
; // free the double buffer
; 
; Delete_Double_Buffer();
; 
; } // end main
; 
; 
; 
; void init_stars()
; {
; int i;
; int offset;
; 
; offset = (stars[i].y << 8) + (stars[i].y << 6) + stars[i].x;
; for(i=0; i<NUM_STARS; i++) {
;     stars[i].x = rand() % 320;
;     stars[i].y = rand() % 200;
;     stars[i].plane = rand() % 3;
;     stars[i].back = double_buffer[offset];
; }
; }
; 
; 
; void update_stars()
; {
; int i;
; int offset;
; 
; for(i=0; i<NUM_STARS; i++) {
;     //erase the star (if it was drawn)
;     if(!stars[i].back)
;       Plot_Pixel_Fast_DB(stars[i].x, stars[i].y, 0);
; 
;     //move the star
;     stars[i].x += star_dx[stars[i].plane];
;     if(stars[i].x < 0) {
; 	stars[i].x += 320;
;     } else if(stars[i].x >=320) {
; 	stars[i].x -= 320;
;     }
;     stars[i].y += star_dy[stars[i].plane];
;     if(stars[i].y < 0) {
; 	stars[i].y += 200;
;     } else if(stars[i].y >=200) {
; 	stars[i].y -= 200;
;     }
; 
;     //draw the star
;     offset = (stars[i].y << 8) + (stars[i].y << 6) + stars[i].x;
;     stars[i].back = double_buffer[offset];
;     if(!stars[i].back)
;       Plot_Pixel_Fast_DB(stars[i].x, stars[i].y, star_color[stars[i].plane]);
; }
; }
; 
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; Line 250
					_main:
	*** 000150	c8 00 00 00 		enter	OFFSET L00999,OFFSET 0
	*** 000154	56 			push	si
	*** 000155	57 			push	di
; curr_screen = fffc
; dy = fffa
; index = fff8
; done = fff6
; ; ; Line 252
; ; Line 253
	*** 000156	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
; ; Line 254
	*** 00015b	c7 46 f6 00 00 		mov	WORD PTR -10[bp],OFFSET 0
; ; Line 255
	*** 000160	c7 46 fa 00 00 		mov	WORD PTR -6[bp],OFFSET 0
; ; ; ; ; ; Line 260
	*** 000165	6a 13 			push	OFFSET 19
	*** 000167	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 00016c	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; Line 264
	*** 00016f	68 c8 00 		push	OFFSET 200
	*** 000172	9a 00 00 00 00 		call	FAR PTR _Create_Double_Buffer
	*** 000177	83 c4 02 		add	sp,OFFSET 2
	*** 00017a	3d 00 00 		cmp	ax,OFFSET 0
	*** 00017d	74 03 e9 00 00 		jne	L00936
; ; Line 265
; ; Line 266
	*** 000182	68 58 02 		push	OFFSET L00937
	*** 000185	9a 00 00 00 00 		call	FAR PTR _printf
	*** 00018a	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 268
; ; ; ; ; ; ; Line 274
					L00936:
	*** 00018d	68 00 00 		push	OFFSET _intro_pcx
	*** 000190	9a 00 00 00 00 		call	FAR PTR _PCX_Init
	*** 000195	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 276
	*** 000198	6a 01 			push	OFFSET 1
	*** 00019a	68 00 00 		push	OFFSET _intro_pcx
	*** 00019d	68 84 02 		push	OFFSET L00938
	*** 0001a0	9a 00 00 00 00 		call	FAR PTR _PCX_Load
	*** 0001a5	83 c4 06 		add	sp,OFFSET 6
; ; ; Line 278
	*** 0001a8	68 00 00 		push	OFFSET _intro_pcx
	*** 0001ab	9a 00 00 00 00 		call	FAR PTR _PCX_Show_Buffer
	*** 0001b0	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; Line 282
	*** 0001b3	6a 32 			push	OFFSET 50
	*** 0001b5	9a 00 00 00 00 		call	FAR PTR _Delay
	*** 0001ba	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 284
	*** 0001bd	68 00 00 		push	OFFSET _intro_pcx
	*** 0001c0	9a 00 00 00 00 		call	FAR PTR _PCX_Delete
	*** 0001c5	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; ; ; Line 290
	*** 0001c8	68 00 00 		push	OFFSET _imagery_pcx
	*** 0001cb	9a 00 00 00 00 		call	FAR PTR _PCX_Init
	*** 0001d0	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 292
	*** 0001d3	6a 01 			push	OFFSET 1
	*** 0001d5	68 00 00 		push	OFFSET _imagery_pcx
	*** 0001d8	68 90 02 		push	OFFSET L00939
	*** 0001db	9a 00 00 00 00 		call	FAR PTR _PCX_Load
	*** 0001e0	83 c4 06 		add	sp,OFFSET 6
; ; ; ; ; Line 296
	*** 0001e3	c7 06 00 00 20 00 	mov	WORD PTR _sprite_width,OFFSET 32
; ; Line 297
	*** 0001e9	c7 06 00 00 20 00 	mov	WORD PTR _sprite_height,OFFSET 32
; ; ; ; ; Line 301
	*** 0001ef	6a 00 			push	OFFSET 0
	*** 0001f1	6a 00 			push	OFFSET 0
	*** 0001f3	6a 00 			push	OFFSET 0
	*** 0001f5	6a 00 			push	OFFSET 0
	*** 0001f7	6a 00 			push	OFFSET 0
	*** 0001f9	6a 00 			push	OFFSET 0
	*** 0001fb	68 00 00 		push	OFFSET _robopunk
	*** 0001fe	9a 00 00 00 00 		call	FAR PTR _Sprite_Init
	*** 000203	83 c4 0e 		add	sp,OFFSET 14
; ; ; ; ; Line 305
	*** 000206	6a 00 			push	OFFSET 0
	*** 000208	6a 00 			push	OFFSET 0
	*** 00020a	6a 00 			push	OFFSET 0
	*** 00020c	6a 00 			push	OFFSET 0
	*** 00020e	6a 00 			push	OFFSET 0
	*** 000210	6a 00 			push	OFFSET 0
	*** 000212	68 00 00 		push	OFFSET _back_cells
	*** 000215	9a 00 00 00 00 		call	FAR PTR _Sprite_Init
	*** 00021a	83 c4 0e 		add	sp,OFFSET 14
; ; ; ; ; Line 309
	*** 00021d	6a 00 			push	OFFSET 0
	*** 00021f	6a 03 			push	OFFSET 3
	*** 000221	6a 00 			push	OFFSET 0
	*** 000223	68 00 00 		push	OFFSET _robopunk
	*** 000226	68 00 00 		push	OFFSET _imagery_pcx
	*** 000229	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 00022e	83 c4 0a 		add	sp,OFFSET 10
; ; Line 310
	*** 000231	6a 00 			push	OFFSET 0
	*** 000233	6a 05 			push	OFFSET 5
	*** 000235	6a 01 			push	OFFSET 1
	*** 000237	68 00 00 		push	OFFSET _robopunk
	*** 00023a	68 00 00 		push	OFFSET _imagery_pcx
	*** 00023d	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 000242	83 c4 0a 		add	sp,OFFSET 10
; ; Line 311
	*** 000245	6a 00 			push	OFFSET 0
	*** 000247	6a 04 			push	OFFSET 4
	*** 000249	6a 02 			push	OFFSET 2
	*** 00024b	68 00 00 		push	OFFSET _robopunk
	*** 00024e	68 00 00 		push	OFFSET _imagery_pcx
	*** 000251	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 000256	83 c4 0a 		add	sp,OFFSET 10
; ; Line 312
	*** 000259	6a 00 			push	OFFSET 0
	*** 00025b	6a 05 			push	OFFSET 5
	*** 00025d	6a 03 			push	OFFSET 3
	*** 00025f	68 00 00 		push	OFFSET _robopunk
	*** 000262	68 00 00 		push	OFFSET _imagery_pcx
	*** 000265	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 00026a	83 c4 0a 		add	sp,OFFSET 10
; ; Line 313
	*** 00026d	6a 00 			push	OFFSET 0
	*** 00026f	6a 06 			push	OFFSET 6
	*** 000271	6a 04 			push	OFFSET 4
	*** 000273	68 00 00 		push	OFFSET _robopunk
	*** 000276	68 00 00 		push	OFFSET _imagery_pcx
	*** 000279	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 00027e	83 c4 0a 		add	sp,OFFSET 10
; ; Line 314
	*** 000281	6a 00 			push	OFFSET 0
	*** 000283	6a 01 			push	OFFSET 1
	*** 000285	6a 05 			push	OFFSET 5
	*** 000287	68 00 00 		push	OFFSET _robopunk
	*** 00028a	68 00 00 		push	OFFSET _imagery_pcx
	*** 00028d	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 000292	83 c4 0a 		add	sp,OFFSET 10
; ; Line 315
	*** 000295	6a 00 			push	OFFSET 0
	*** 000297	6a 02 			push	OFFSET 2
	*** 000299	6a 06 			push	OFFSET 6
	*** 00029b	68 00 00 		push	OFFSET _robopunk
	*** 00029e	68 00 00 		push	OFFSET _imagery_pcx
	*** 0002a1	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 0002a6	83 c4 0a 		add	sp,OFFSET 10
; ; Line 316
	*** 0002a9	6a 00 			push	OFFSET 0
	*** 0002ab	6a 01 			push	OFFSET 1
	*** 0002ad	6a 07 			push	OFFSET 7
	*** 0002af	68 00 00 		push	OFFSET _robopunk
	*** 0002b2	68 00 00 		push	OFFSET _imagery_pcx
	*** 0002b5	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 0002ba	83 c4 0a 		add	sp,OFFSET 10
; ; Line 317
	*** 0002bd	6a 00 			push	OFFSET 0
	*** 0002bf	6a 00 			push	OFFSET 0
	*** 0002c1	6a 08 			push	OFFSET 8
	*** 0002c3	68 00 00 		push	OFFSET _robopunk
	*** 0002c6	68 00 00 		push	OFFSET _imagery_pcx
	*** 0002c9	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 0002ce	83 c4 0a 		add	sp,OFFSET 10
; ; ; ; ; ; Line 322
	*** 0002d1	c7 46 f8 00 00 		mov	WORD PTR -8[bp],OFFSET 0
	*** 0002d6	e9 00 00 		jmp	L00943
					L00940:
; ; Line 323
; ; ; Line 325
	*** 0002d9	6a 01 			push	OFFSET 1
	*** 0002db	ff 76 f8 		push	WORD PTR -8[bp]
	*** 0002de	ff 76 f8 		push	WORD PTR -8[bp]
	*** 0002e1	68 00 00 		push	OFFSET _back_cells
	*** 0002e4	68 00 00 		push	OFFSET _imagery_pcx
	*** 0002e7	9a 00 00 00 00 		call	FAR PTR _PCX_Grab_Bitmap
	*** 0002ec	83 c4 0a 		add	sp,OFFSET 10
; ; ; Line 327
					L00941:
; Line 327
	*** 0002ef	83 46 f8 01 		add	WORD PTR -8[bp],OFFSET 1
					L00943:
	*** 0002f3	83 7e f8 08 		cmp	WORD PTR -8[bp],OFFSET 8
	*** 0002f7	7d 03 e9 dd ff 		jl	L00940
					L00942:
; ; ; ; ; Line 331
	*** 0002fc	68 00 00 		push	OFFSET _imagery_pcx
	*** 0002ff	9a 00 00 00 00 		call	FAR PTR _PCX_Delete
	*** 000304	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; ; ; Line 337
	*** 000307	c7 06 b0 01 bc 01 	mov	WORD PTR _universe,OFFSET _screen_1
; ; Line 338
	*** 00030d	c7 06 b2 01 c8 01 	mov	WORD PTR _universe+2,OFFSET _screen_2
; ; Line 339
	*** 000313	c7 06 b4 01 d4 01 	mov	WORD PTR _universe+4,OFFSET _screen_3
; ; Line 340
	*** 000319	c7 06 b6 01 e0 01 	mov	WORD PTR _universe+6,OFFSET _screen_4
; ; Line 341
	*** 00031f	c7 06 b8 01 ec 01 	mov	WORD PTR _universe+8,OFFSET _screen_5
; ; Line 342
	*** 000325	c7 06 ba 01 f8 01 	mov	WORD PTR _universe+10,OFFSET _screen_6
; ; ; Line 344
	*** 00032b	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 00032e	d1 e3 			shl	bx,OFFSET 1
	*** 000330	ff b7 b0 01 		push	WORD PTR _universe[bx]
	*** 000334	9a 00 00 00 00 		call	FAR PTR _Draw_Screen
	*** 000339	83 c4 02 		add	sp,OFFSET 2
; ; Line 345
	*** 00033c	ff 36 02 00 		push	WORD PTR _double_buffer+2
	*** 000340	ff 36 00 00 		push	WORD PTR _double_buffer
	*** 000344	9a 00 00 00 00 		call	FAR PTR _Show_Double_Buffer
	*** 000349	83 c4 04 		add	sp,OFFSET 4
; ; ; Line 347
	*** 00034c	9a 00 00 00 00 		call	FAR PTR _init_stars
; ; ; ; Line 350
	*** 000351	c7 06 00 00 a0 00 	mov	WORD PTR _robopunk,OFFSET 160
; ; Line 351
	*** 000357	c7 06 02 00 4a 00 	mov	WORD PTR _robopunk+2,OFFSET 74
; ; ; Line 353
	*** 00035d	c7 06 74 00 00 00 	mov	WORD PTR _robopunk+116,OFFSET 0
; ; ; ; ; Line 357
	*** 000363	68 00 00 		push	OFFSET _robopunk
	*** 000366	9a 00 00 00 00 		call	FAR PTR _Behind_Sprite_DB
	*** 00036b	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; ; ; Line 363
	*** 00036e	e9 00 00 		jmp	L00947
					L00944:
; ; Line 364
; ; ; ; ; ; ; Line 370
	*** 000371	68 00 00 		push	OFFSET _robopunk
	*** 000374	9a 00 00 00 00 		call	FAR PTR _Erase_Sprite_DB
	*** 000379	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 372
	*** 00037c	9a 00 00 00 00 		call	FAR PTR _update_stars
; ; ; ; Line 375
	*** 000381	83 7e fa 00 		cmp	WORD PTR -6[bp],OFFSET 0
	*** 000385	75 03 e9 00 00 		je	L00948
; ; Line 376
	*** 00038a	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 00038d	01 06 02 00 		add	WORD PTR _robopunk+2,ax
; ; Line 377
	*** 000391	83 46 fa 01 		add	WORD PTR -6[bp],OFFSET 1
; ; Line 378
	*** 000395	b8 c7 00 		mov	ax,OFFSET 199
	*** 000398	2b 06 0a 00 		sub	ax,WORD PTR _robopunk+10
	*** 00039c	39 06 02 00 		cmp	WORD PTR _robopunk+2,ax
	*** 0003a0	7d 03 e9 00 00 		jl	L00949
; ; Line 379
	*** 0003a5	c7 46 f6 01 00 		mov	WORD PTR -10[bp],OFFSET 1
; ; Line 380
	*** 0003aa	e9 00 00 		jmp	L00945
; ; Line 381
; ; Line 382
					L00949:
; ; ; ; ; Line 386
					L00948:
	*** 0003ad	9a 00 00 00 00 		call	FAR PTR _kbhit
	*** 0003b2	3d 00 00 		cmp	ax,OFFSET 0
	*** 0003b5	75 03 e9 00 00 		je	L00950
; ; Line 387
; ; ; ; ; ; Line 392
	*** 0003ba	9a 00 00 00 00 		call	FAR PTR _getch
	*** 0003bf	e9 00 00 		jmp	L00951
; ; Line 393
; ; ; Line 395
					L00955:
; ; Line 396
; ; ; ; ; ; ; Line 402
	*** 0003c2	83 3e 74 00 00 		cmp	WORD PTR _robopunk+116,OFFSET 0
	*** 0003c7	7f 03 e9 00 00 		jle	L00956
	*** 0003cc	83 3e 74 00 05 		cmp	WORD PTR _robopunk+116,OFFSET 5
	*** 0003d1	7c 03 e9 00 00 		jge	L00956
; ; Line 403
; ; Line 404
	*** 0003d6	c7 06 74 00 00 00 	mov	WORD PTR _robopunk+116,OFFSET 0
; ; Line 405
; ; Line 406
	*** 0003dc	e9 00 00 		jmp	L00957
					L00956:
; Line 406
; ; Line 407
	*** 0003df	83 3e 74 00 00 		cmp	WORD PTR _robopunk+116,OFFSET 0
	*** 0003e4	74 03 e9 00 00 		jne	L00958
; ; Line 408
	*** 0003e9	c7 06 74 00 05 00 	mov	WORD PTR _robopunk+116,OFFSET 5
; ; Line 409
	*** 0003ef	e9 00 00 		jmp	L00959
					L00958:
; Line 409
; ; Line 410
; ; ; ; Line 413
	*** 0003f2	83 06 74 00 01 		add	WORD PTR _robopunk+116,OFFSET 1
	*** 0003f7	a1 74 00 		mov	ax,WORD PTR _robopunk+116
	*** 0003fa	3d 08 00 		cmp	ax,OFFSET 8
	*** 0003fd	7f 03 e9 00 00 		jle	L00960
; ; Line 414
	*** 000402	c7 06 74 00 05 00 	mov	WORD PTR _robopunk+116,OFFSET 5
; ; ; ; ; Line 418
					L00960:
	*** 000408	83 2e 00 00 08 		sub	WORD PTR _robopunk,OFFSET 8
; ; ; ; ; Line 422
	*** 00040d	83 3e 00 00 08 		cmp	WORD PTR _robopunk,OFFSET 8
	*** 000412	7c 03 e9 00 00 		jge	L00961
; ; Line 423
; ; ; ; Line 426
	*** 000417	83 7e fc 00 		cmp	WORD PTR -4[bp],OFFSET 0
	*** 00041b	74 03 e9 00 00 		jne	L00962
; ; Line 427
; ; Line 428
	*** 000420	83 06 00 00 08 		add	WORD PTR _robopunk,OFFSET 8
; ; Line 429
; ; Line 430
	*** 000425	e9 00 00 		jmp	L00963
					L00962:
; Line 430
; ; Line 431
; ; ; ; ; Line 435
	*** 000428	c7 06 00 00 18 01 	mov	WORD PTR _robopunk,OFFSET 280
; ; ; ; ; Line 439
	*** 00042e	83 6e fc 01 		sub	WORD PTR -4[bp],OFFSET 1
; ; ; Line 441
	*** 000432	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000435	d1 e3 			shl	bx,OFFSET 1
	*** 000437	ff b7 b0 01 		push	WORD PTR _universe[bx]
	*** 00043b	9a 00 00 00 00 		call	FAR PTR _Draw_Screen
	*** 000440	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 443
					L00963:
; ; ; Line 445
; ; ; Line 447
					L00961:
					L00959:
					L00957:
; ; ; Line 449
	*** 000443	e9 00 00 		jmp	L00952
; ; ; ; Line 452
					L00964:
; ; Line 453
; ; ; ; ; ; ; ; Line 460
	*** 000446	83 3e 74 00 04 		cmp	WORD PTR _robopunk+116,OFFSET 4
	*** 00044b	7f 03 e9 00 00 		jle	L00965
; ; Line 461
; ; Line 462
	*** 000450	c7 06 74 00 00 00 	mov	WORD PTR _robopunk+116,OFFSET 0
; ; Line 463
; ; Line 464
	*** 000456	e9 00 00 		jmp	L00966
					L00965:
; Line 464
; ; Line 465
	*** 000459	83 3e 74 00 00 		cmp	WORD PTR _robopunk+116,OFFSET 0
	*** 00045e	74 03 e9 00 00 		jne	L00967
; ; Line 466
	*** 000463	c7 06 74 00 01 00 	mov	WORD PTR _robopunk+116,OFFSET 1
; ; Line 467
	*** 000469	e9 00 00 		jmp	L00968
					L00967:
; Line 467
; ; Line 468
; ; ; ; Line 471
	*** 00046c	83 06 74 00 01 		add	WORD PTR _robopunk+116,OFFSET 1
	*** 000471	a1 74 00 		mov	ax,WORD PTR _robopunk+116
	*** 000474	3d 04 00 		cmp	ax,OFFSET 4
	*** 000477	7f 03 e9 00 00 		jle	L00969
; ; Line 472
	*** 00047c	c7 06 74 00 01 00 	mov	WORD PTR _robopunk+116,OFFSET 1
; ; ; ; ; Line 476
					L00969:
	*** 000482	83 06 00 00 08 		add	WORD PTR _robopunk,OFFSET 8
; ; ; ; ; Line 480
	*** 000487	a1 00 00 		mov	ax,WORD PTR _robopunk
	*** 00048a	3d 18 01 		cmp	ax,OFFSET 280
	*** 00048d	77 03 e9 00 00 		jbe	L00970
; ; Line 481
; ; ; ; Line 484
	*** 000492	83 7e fc 05 		cmp	WORD PTR -4[bp],OFFSET 5
	*** 000496	74 03 e9 00 00 		jne	L00971
; ; Line 485
; ; Line 486
	*** 00049b	83 2e 00 00 08 		sub	WORD PTR _robopunk,OFFSET 8
; ; Line 487
	*** 0004a0	c7 46 fa 04 00 		mov	WORD PTR -6[bp],OFFSET 4
; ; Line 488
; ; Line 489
	*** 0004a5	e9 00 00 		jmp	L00972
					L00971:
; Line 489
; ; Line 490
; ; ; ; ; Line 494
	*** 0004a8	c7 06 00 00 08 00 	mov	WORD PTR _robopunk,OFFSET 8
; ; ; ; ; Line 498
	*** 0004ae	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
; ; ; Line 500
	*** 0004b2	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 0004b5	d1 e3 			shl	bx,OFFSET 1
	*** 0004b7	ff b7 b0 01 		push	WORD PTR _universe[bx]
	*** 0004bb	9a 00 00 00 00 		call	FAR PTR _Draw_Screen
	*** 0004c0	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 502
					L00972:
; ; ; Line 504
; ; ; Line 506
					L00970:
					L00968:
					L00966:
; ; ; Line 508
	*** 0004c3	e9 00 00 		jmp	L00952
; ; ; Line 510
					L00973:
; ; Line 511
; ; Line 512
	*** 0004c6	c7 46 f6 01 00 		mov	WORD PTR -10[bp],OFFSET 1
; ; ; Line 514
	*** 0004cb	e9 00 00 		jmp	L00952
; ; ; Line 516
					L00974:
	*** 0004ce	e9 00 00 		jmp	L00952
; ; ; Line 518
; Line 518
	*** 0004d1	e9 00 00 		jmp	L00952
					L00951:
	*** 0004d4	3d 61 00 		cmp	ax,OFFSET 97
	*** 0004d7	75 03 e9 e6 fe 		je	L00955
	*** 0004dc	3d 71 00 		cmp	ax,OFFSET 113
	*** 0004df	75 03 e9 e2 ff 		je	L00973
	*** 0004e4	3d 73 00 		cmp	ax,OFFSET 115
	*** 0004e7	75 03 e9 5a ff 		je	L00964
	*** 0004ec	e9 df ff 		jmp	L00974
					L00952:
; ; ; ; Line 521
; ; ; ; ; ; ; Line 527
					L00950:
	*** 0004ef	68 00 00 		push	OFFSET _robopunk
	*** 0004f2	9a 00 00 00 00 		call	FAR PTR _Behind_Sprite_DB
	*** 0004f7	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; Line 531
	*** 0004fa	68 00 00 		push	OFFSET _robopunk
	*** 0004fd	9a 00 00 00 00 		call	FAR PTR _Draw_Sprite_DB
	*** 000502	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; ; ; ; ; Line 539
	*** 000505	9a 00 00 00 00 		call	FAR PTR _Rotate_Lights
; ; ; ; ; Line 543
	*** 00050a	ff 36 02 00 		push	WORD PTR _double_buffer+2
	*** 00050e	ff 36 00 00 		push	WORD PTR _double_buffer
	*** 000512	9a 00 00 00 00 		call	FAR PTR _Show_Double_Buffer
	*** 000517	83 c4 04 		add	sp,OFFSET 4
; ; ; ; ; Line 547
	*** 00051a	6a 01 			push	OFFSET 1
	*** 00051c	9a 00 00 00 00 		call	FAR PTR _Delay
	*** 000521	83 c4 02 		add	sp,OFFSET 2
; ; ; Line 549
					L00945:
; Line 549
					L00947:
	*** 000524	83 7e f6 00 		cmp	WORD PTR -10[bp],OFFSET 0
	*** 000528	75 03 e9 44 fe 		je	L00944
					L00946:
; ; ; ; ; ; ; Line 555
	*** 00052d	6a 0c 			push	OFFSET 12
	*** 00052f	9a 00 00 00 00 		call	FAR PTR _Disolve_Color
	*** 000534	83 c4 02 		add	sp,OFFSET 2
; ; Line 556
	*** 000537	9a 00 00 00 00 		call	FAR PTR _Fade_Lights
; ; ; ; ; Line 560
	*** 00053c	6a 03 			push	OFFSET 3
	*** 00053e	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 000543	83 c4 02 		add	sp,OFFSET 2
; ; ; ; ; Line 564
	*** 000546	9a 00 00 00 00 		call	FAR PTR _Delete_Double_Buffer
; ; ; Line 566
; Line 566
					L00931:
	*** 00054b	5f 			pop	di
	*** 00054c	5e 			pop	si
	*** 00054d	c9 			leave
	*** 00054e	cb 			ret	OFFSET 0
Local Size: 10
; Line 0
ine 571
					_init_stars:
	*** 000550	c8 00 00 00 		enter	OFFSET L01000,OFFSET 0
	*** 000554	56 			push	si
	*** 000555	57 			push	di
; i = fffc
; offset = fffa
; ; Line 572
; ; Line 573
; ; ; Line 575
	*** 000556	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000559	d1 e0 			shl	ax,OFFSET 1
	*** 00055b	d1 e0 			shl	ax,OFFSET 1
	*** 00055d	d1 e0 			shl	ax,OFFSET 1
	*** 00055f	bb 00 00 		mov	bx,OFFSET _stars
	*** 000562	03 d8 			add	bx,ax
	*** 000564	8b 47 02 		mov	ax,WORD PTR 2[bx]
	*** 000567	c1 e0 06 		shl	ax,OFFSET 6
	*** 00056a	8b 56 fc 		mov	dx,WORD PTR -4[bp]
	*** 00056d	d1 e2 			shl	dx,OFFSET 1
	*** 00056f	d1 e2 			shl	dx,OFFSET 1
	*** 000571	d1 e2 			shl	dx,OFFSET 1
	*** 000573	bb 00 00 		mov	bx,OFFSET _stars
	*** 000576	03 da 			add	bx,dx
	*** 000578	8b 57 02 		mov	dx,WORD PTR 2[bx]
	*** 00057b	c1 e2 08 		shl	dx,OFFSET 8
	*** 00057e	03 d0 			add	dx,ax
	*** 000580	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000583	d1 e3 			shl	bx,OFFSET 1
	*** 000585	d1 e3 			shl	bx,OFFSET 1
	*** 000587	d1 e3 			shl	bx,OFFSET 1
	*** 000589	03 97 00 00 		add	dx,WORD PTR _stars[bx]
	*** 00058d	89 56 fa 		mov	WORD PTR -6[bp],dx
; ; Line 576
	*** 000590	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
	*** 000595	e9 00 00 		jmp	L00981
					L00978:
; ; Line 577
	*** 000598	9a 00 00 00 00 		call	FAR PTR _rand
	*** 00059d	b9 40 01 		mov	cx,OFFSET 320
	*** 0005a0	99 			cwd
	*** 0005a1	f7 f9 			idiv	cx
	*** 0005a3	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 0005a6	d1 e3 			shl	bx,OFFSET 1
	*** 0005a8	d1 e3 			shl	bx,OFFSET 1
	*** 0005aa	d1 e3 			shl	bx,OFFSET 1
	*** 0005ac	89 97 00 00 		mov	WORD PTR _stars[bx],dx
; ; Line 578
	*** 0005b0	9a 00 00 00 00 		call	FAR PTR _rand
	*** 0005b5	b9 c8 00 		mov	cx,OFFSET 200
	*** 0005b8	99 			cwd
	*** 0005b9	f7 f9 			idiv	cx
	*** 0005bb	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0005be	d1 e0 			shl	ax,OFFSET 1
	*** 0005c0	d1 e0 			shl	ax,OFFSET 1
	*** 0005c2	d1 e0 			shl	ax,OFFSET 1
	*** 0005c4	bb 00 00 		mov	bx,OFFSET _stars
	*** 0005c7	03 d8 			add	bx,ax
	*** 0005c9	89 57 02 		mov	WORD PTR 2[bx],dx
; ; Line 579
	*** 0005cc	9a 00 00 00 00 		call	FAR PTR _rand
	*** 0005d1	b9 03 00 		mov	cx,OFFSET 3
	*** 0005d4	99 			cwd
	*** 0005d5	f7 f9 			idiv	cx
	*** 0005d7	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0005da	d1 e0 			shl	ax,OFFSET 1
	*** 0005dc	d1 e0 			shl	ax,OFFSET 1
	*** 0005de	d1 e0 			shl	ax,OFFSET 1
	*** 0005e0	bb 00 00 		mov	bx,OFFSET _stars
	*** 0005e3	03 d8 			add	bx,ax
	*** 0005e5	89 57 04 		mov	WORD PTR 4[bx],dx
; ; Line 580
	*** 0005e8	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 0005eb	8b 1e 00 00 		mov	bx,WORD PTR _double_buffer
	*** 0005ef	8b 0e 02 00 		mov	cx,WORD PTR _double_buffer+2
	*** 0005f3	03 d8 			add	bx,ax
	*** 0005f5	8e c1 			mov	es,cx
	*** 0005f7	26 8a 07 		mov	al,BYTE PTR es:[bx]
	*** 0005fa	8b 56 fc 		mov	dx,WORD PTR -4[bp]
	*** 0005fd	d1 e2 			shl	dx,OFFSET 1
	*** 0005ff	d1 e2 			shl	dx,OFFSET 1
	*** 000601	d1 e2 			shl	dx,OFFSET 1
	*** 000603	bb 00 00 		mov	bx,OFFSET _stars
	*** 000606	03 da 			add	bx,dx
	*** 000608	88 47 06 		mov	BYTE PTR 6[bx],al
; ; Line 581
					L00979:
; Line 581
	*** 00060b	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
					L00981:
	*** 00060f	83 7e fc 4b 		cmp	WORD PTR -4[bp],OFFSET 75
	*** 000613	7d 03 e9 80 ff 		jl	L00978
					L00980:
; ; Line 582
; Line 582
					L00975:
	*** 000618	5f 			pop	di
	*** 000619	5e 			pop	si
	*** 00061a	c9 			leave
	*** 00061b	cb 			ret	OFFSET 0
Local Size: 6
; Line 0
ine 586
					_update_stars:
	*** 00061c	c8 00 00 00 		enter	OFFSET L01001,OFFSET 0
	*** 000620	56 			push	si
	*** 000621	57 			push	di
; i = fffc
; offset = fffa
; ; Line 587
; ; Line 588
; ; ; Line 590
	*** 000622	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
	*** 000627	e9 00 00 		jmp	L00988
					L00985:
; ; ; Line 592
	*** 00062a	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00062d	d1 e0 			shl	ax,OFFSET 1
	*** 00062f	d1 e0 			shl	ax,OFFSET 1
	*** 000631	d1 e0 			shl	ax,OFFSET 1
	*** 000633	bb 00 00 		mov	bx,OFFSET _stars
	*** 000636	03 d8 			add	bx,ax
	*** 000638	8a 47 06 		mov	al,BYTE PTR 6[bx]
	*** 00063b	25 ff 00 		and	ax,OFFSET 255
	*** 00063e	3d 00 00 		cmp	ax,OFFSET 0
	*** 000641	74 03 e9 00 00 		jne	L00989
; ; Line 593
	*** 000646	6a 00 			push	OFFSET 0
	*** 000648	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00064b	d1 e0 			shl	ax,OFFSET 1
	*** 00064d	d1 e0 			shl	ax,OFFSET 1
	*** 00064f	d1 e0 			shl	ax,OFFSET 1
	*** 000651	bb 00 00 		mov	bx,OFFSET _stars
	*** 000654	03 d8 			add	bx,ax
	*** 000656	ff 77 02 		push	WORD PTR 2[bx]
	*** 000659	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 00065c	d1 e3 			shl	bx,OFFSET 1
	*** 00065e	d1 e3 			shl	bx,OFFSET 1
	*** 000660	d1 e3 			shl	bx,OFFSET 1
	*** 000662	ff b7 00 00 		push	WORD PTR _stars[bx]
	*** 000666	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast_DB
	*** 00066b	83 c4 06 		add	sp,OFFSET 6
; ; ; ; Line 596
					L00989:
	*** 00066e	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000671	d1 e0 			shl	ax,OFFSET 1
	*** 000673	d1 e0 			shl	ax,OFFSET 1
	*** 000675	d1 e0 			shl	ax,OFFSET 1
	*** 000677	bb 00 00 		mov	bx,OFFSET _stars
	*** 00067a	03 d8 			add	bx,ax
	*** 00067c	8b 5f 04 		mov	bx,WORD PTR 4[bx]
	*** 00067f	d1 e3 			shl	bx,OFFSET 1
	*** 000681	8b 87 08 02 		mov	ax,WORD PTR _star_dx[bx]
	*** 000685	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000688	d1 e3 			shl	bx,OFFSET 1
	*** 00068a	d1 e3 			shl	bx,OFFSET 1
	*** 00068c	d1 e3 			shl	bx,OFFSET 1
	*** 00068e	01 87 00 00 		add	WORD PTR _stars[bx],ax
; ; Line 597
	*** 000692	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000695	d1 e3 			shl	bx,OFFSET 1
	*** 000697	d1 e3 			shl	bx,OFFSET 1
	*** 000699	d1 e3 			shl	bx,OFFSET 1
	*** 00069b	83 bf 00 00 00 		cmp	WORD PTR _stars[bx],OFFSET 0
	*** 0006a0	7c 03 e9 00 00 		jge	L00990
; ; Line 598
	*** 0006a5	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 0006a8	d1 e3 			shl	bx,OFFSET 1
	*** 0006aa	d1 e3 			shl	bx,OFFSET 1
	*** 0006ac	d1 e3 			shl	bx,OFFSET 1
	*** 0006ae	81 87 00 00 40 01 	add	WORD PTR _stars[bx],OFFSET 320
; ; Line 599
	*** 0006b4	e9 00 00 		jmp	L00991
					L00990:
; Line 599
	*** 0006b7	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 0006ba	d1 e3 			shl	bx,OFFSET 1
	*** 0006bc	d1 e3 			shl	bx,OFFSET 1
	*** 0006be	d1 e3 			shl	bx,OFFSET 1
	*** 0006c0	81 bf 00 00 40 01 	cmp	WORD PTR _stars[bx],OFFSET 320
	*** 0006c6	7d 03 e9 00 00 		jl	L00992
; ; Line 600
	*** 0006cb	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 0006ce	d1 e3 			shl	bx,OFFSET 1
	*** 0006d0	d1 e3 			shl	bx,OFFSET 1
	*** 0006d2	d1 e3 			shl	bx,OFFSET 1
	*** 0006d4	81 af 00 00 40 01 	sub	WORD PTR _stars[bx],OFFSET 320
; ; Line 601
; ; Line 602
					L00992:
					L00991:
	*** 0006da	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0006dd	d1 e0 			shl	ax,OFFSET 1
	*** 0006df	d1 e0 			shl	ax,OFFSET 1
	*** 0006e1	d1 e0 			shl	ax,OFFSET 1
	*** 0006e3	bb 00 00 		mov	bx,OFFSET _stars
	*** 0006e6	03 d8 			add	bx,ax
	*** 0006e8	8b 5f 04 		mov	bx,WORD PTR 4[bx]
	*** 0006eb	d1 e3 			shl	bx,OFFSET 1
	*** 0006ed	8b 87 0e 02 		mov	ax,WORD PTR _star_dy[bx]
	*** 0006f1	8b 56 fc 		mov	dx,WORD PTR -4[bp]
	*** 0006f4	d1 e2 			shl	dx,OFFSET 1
	*** 0006f6	d1 e2 			shl	dx,OFFSET 1
	*** 0006f8	d1 e2 			shl	dx,OFFSET 1
	*** 0006fa	bb 00 00 		mov	bx,OFFSET _stars
	*** 0006fd	03 da 			add	bx,dx
	*** 0006ff	01 47 02 		add	WORD PTR 2[bx],ax
; ; Line 603
	*** 000702	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000705	d1 e0 			shl	ax,OFFSET 1
	*** 000707	d1 e0 			shl	ax,OFFSET 1
	*** 000709	d1 e0 			shl	ax,OFFSET 1
	*** 00070b	bb 00 00 		mov	bx,OFFSET _stars
	*** 00070e	03 d8 			add	bx,ax
	*** 000710	83 7f 02 00 		cmp	WORD PTR 2[bx],OFFSET 0
	*** 000714	7c 03 e9 00 00 		jge	L00993
; ; Line 604
	*** 000719	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00071c	d1 e0 			shl	ax,OFFSET 1
	*** 00071e	d1 e0 			shl	ax,OFFSET 1
	*** 000720	d1 e0 			shl	ax,OFFSET 1
	*** 000722	bb 00 00 		mov	bx,OFFSET _stars
	*** 000725	03 d8 			add	bx,ax
	*** 000727	81 47 02 c8 00 		add	WORD PTR 2[bx],OFFSET 200
; ; Line 605
	*** 00072c	e9 00 00 		jmp	L00994
					L00993:
; Line 605
	*** 00072f	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000732	d1 e0 			shl	ax,OFFSET 1
	*** 000734	d1 e0 			shl	ax,OFFSET 1
	*** 000736	d1 e0 			shl	ax,OFFSET 1
	*** 000738	bb 00 00 		mov	bx,OFFSET _stars
	*** 00073b	03 d8 			add	bx,ax
	*** 00073d	81 7f 02 c8 00 		cmp	WORD PTR 2[bx],OFFSET 200
	*** 000742	7d 03 e9 00 00 		jl	L00995
; ; Line 606
	*** 000747	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00074a	d1 e0 			shl	ax,OFFSET 1
	*** 00074c	d1 e0 			shl	ax,OFFSET 1
	*** 00074e	d1 e0 			shl	ax,OFFSET 1
	*** 000750	bb 00 00 		mov	bx,OFFSET _stars
	*** 000753	03 d8 			add	bx,ax
	*** 000755	81 6f 02 c8 00 		sub	WORD PTR 2[bx],OFFSET 200
; ; Line 607
; ; ; ; Line 610
					L00995:
					L00994:
	*** 00075a	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00075d	d1 e0 			shl	ax,OFFSET 1
	*** 00075f	d1 e0 			shl	ax,OFFSET 1
	*** 000761	d1 e0 			shl	ax,OFFSET 1
	*** 000763	bb 00 00 		mov	bx,OFFSET _stars
	*** 000766	03 d8 			add	bx,ax
	*** 000768	8b 47 02 		mov	ax,WORD PTR 2[bx]
	*** 00076b	c1 e0 06 		shl	ax,OFFSET 6
	*** 00076e	8b 56 fc 		mov	dx,WORD PTR -4[bp]
	*** 000771	d1 e2 			shl	dx,OFFSET 1
	*** 000773	d1 e2 			shl	dx,OFFSET 1
	*** 000775	d1 e2 			shl	dx,OFFSET 1
	*** 000777	bb 00 00 		mov	bx,OFFSET _stars
	*** 00077a	03 da 			add	bx,dx
	*** 00077c	8b 57 02 		mov	dx,WORD PTR 2[bx]
	*** 00077f	c1 e2 08 		shl	dx,OFFSET 8
	*** 000782	03 d0 			add	dx,ax
	*** 000784	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000787	d1 e3 			shl	bx,OFFSET 1
	*** 000789	d1 e3 			shl	bx,OFFSET 1
	*** 00078b	d1 e3 			shl	bx,OFFSET 1
	*** 00078d	03 97 00 00 		add	dx,WORD PTR _stars[bx]
	*** 000791	89 56 fa 		mov	WORD PTR -6[bp],dx
; ; Line 611
	*** 000794	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 000797	8b 1e 00 00 		mov	bx,WORD PTR _double_buffer
	*** 00079b	8b 0e 02 00 		mov	cx,WORD PTR _double_buffer+2
	*** 00079f	03 d8 			add	bx,ax
	*** 0007a1	8e c1 			mov	es,cx
	*** 0007a3	26 8a 07 		mov	al,BYTE PTR es:[bx]
	*** 0007a6	8b 56 fc 		mov	dx,WORD PTR -4[bp]
	*** 0007a9	d1 e2 			shl	dx,OFFSET 1
	*** 0007ab	d1 e2 			shl	dx,OFFSET 1
	*** 0007ad	d1 e2 			shl	dx,OFFSET 1
	*** 0007af	bb 00 00 		mov	bx,OFFSET _stars
	*** 0007b2	03 da 			add	bx,dx
	*** 0007b4	88 47 06 		mov	BYTE PTR 6[bx],al
; ; Line 612
	*** 0007b7	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0007ba	d1 e0 			shl	ax,OFFSET 1
	*** 0007bc	d1 e0 			shl	ax,OFFSET 1
	*** 0007be	d1 e0 			shl	ax,OFFSET 1
	*** 0007c0	bb 00 00 		mov	bx,OFFSET _stars
	*** 0007c3	03 d8 			add	bx,ax
	*** 0007c5	8a 47 06 		mov	al,BYTE PTR 6[bx]
	*** 0007c8	25 ff 00 		and	ax,OFFSET 255
	*** 0007cb	3d 00 00 		cmp	ax,OFFSET 0
	*** 0007ce	74 03 e9 00 00 		jne	L00996
; ; Line 613
	*** 0007d3	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0007d6	d1 e0 			shl	ax,OFFSET 1
	*** 0007d8	d1 e0 			shl	ax,OFFSET 1
	*** 0007da	d1 e0 			shl	ax,OFFSET 1
	*** 0007dc	bb 00 00 		mov	bx,OFFSET _stars
	*** 0007df	03 d8 			add	bx,ax
	*** 0007e1	8b 5f 04 		mov	bx,WORD PTR 4[bx]
	*** 0007e4	8a 87 04 02 		mov	al,BYTE PTR _star_color[bx]
	*** 0007e8	25 ff 00 		and	ax,OFFSET 255
	*** 0007eb	50 			push	ax
	*** 0007ec	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 0007ef	d1 e0 			shl	ax,OFFSET 1
	*** 0007f1	d1 e0 			shl	ax,OFFSET 1
	*** 0007f3	d1 e0 			shl	ax,OFFSET 1
	*** 0007f5	bb 00 00 		mov	bx,OFFSET _stars
	*** 0007f8	03 d8 			add	bx,ax
	*** 0007fa	ff 77 02 		push	WORD PTR 2[bx]
	*** 0007fd	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000800	d1 e3 			shl	bx,OFFSET 1
	*** 000802	d1 e3 			shl	bx,OFFSET 1
	*** 000804	d1 e3 			shl	bx,OFFSET 1
	*** 000806	ff b7 00 00 		push	WORD PTR _stars[bx]
	*** 00080a	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast_DB
	*** 00080f	83 c4 06 		add	sp,OFFSET 6
; ; Line 614
					L00996:
					L00986:
; Line 614
	*** 000812	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
					L00988:
	*** 000816	83 7e fc 4b 		cmp	WORD PTR -4[bp],OFFSET 75
	*** 00081a	7d 03 e9 0b fe 		jl	L00985
					L00987:
; ; Line 615
; Line 615
					L00982:
	*** 00081f	5f 			pop	di
	*** 000820	5e 			pop	si
	*** 000821	c9 			leave
	*** 000822	cb 			ret	OFFSET 0
Local Size: 6
; Line 0
