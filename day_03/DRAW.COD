; File draw.c
; // This is a crude drawing program which allows the user to select
; // colors and draw with the arrow keys
; // Author: Robert Lowe
; #include <io.h>
; #include <conio.h>
; #include <stdio.h>
; #include <stdlib.h>
; #include <dos.h>
; #include <bios.h>
; #include "graph3.h" 
; 
; // G L O B A L S //////////////////////////////////////////////////////////////
; unsigned char color[] = { 0x00, //black
;                           0x0f, //white
; 			  0x28, //red
; 			  0x2f, //green
; 			  0x20, //blue
; 			  0x2a, //orange
; 			  0x2c, //yellow
; 			  0x23, //purple
; 			  0x06, //brown
; 			  0x19  //gray
;                         };
; int cur_color = 0x0f;	//current color
; int cx, cy; 		//cursor position
; int done = 0;		//set to true when it is time to exit
; 
; // D E F I N E S /////////////////////////////////////////////////////////////
; 
; // begin keyboard stuff
; #define KEYBOARD_INT    0x09        // the keyboard interrupt number
; #define KEY_BUFFER      0x60        // the buffer port
; #define KEY_CONTROL     0x61        // the controller port
; #define INT_CONTROL     0x20        // the interrupt controller
; #define ESC_KEY		129
; #define ONE_KEY		2
; #define ZERO_KEY	11
; #define KEY_UP		72
; #define KEY_DOWN	80
; #define KEY_LEFT	75
; #define KEY_RIGHT	77
; 
; // P R O T O T Y P E S //////////////////////////////////////////////////////
; void _interrupt _far New_Key_Int(void);
; void draw_swatch(int x, int y, unsigned char color);
; 
; 
; // F U N C T I O N S //////////////////////////////////////////////////////////
; void main()
; {
; Line 50
					_main:
	*** 000000	c8 00 00 00 		enter	OFFSET L00543,OFFSET 0
	*** 000004	56 			push	si
	*** 000005	57 			push	di
; x = fffc
; i = fffa
; Old_Isr = fff6
; int x, i;
; Line 51
; void (_interrupt _far *Old_Isr)();  // holds old keyboard interrupt handler
; Line 52
; 
; // install our ISR
; Old_Isr = _dos_getvect(KEYBOARD_INT);
; Line 55
	*** 000006	6a 09 			push	OFFSET 9
	*** 000008	9a 00 00 00 00 		call	FAR PTR __dos_getvect
	*** 00000d	83 c4 02 		add	sp,OFFSET 2
	*** 000010	89 46 f6 		mov	WORD PTR -10[bp],ax
	*** 000013	89 56 f8 		mov	WORD PTR -8[bp],dx
; _dos_setvect(KEYBOARD_INT, New_Key_Int);
; Line 56
	*** 000016	68 00 00 		push	SEG _New_Key_Int
	*** 000019	68 00 00 		push	OFFSET _New_Key_Int
	*** 00001c	6a 09 			push	OFFSET 9
	*** 00001e	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 000023	83 c4 06 		add	sp,OFFSET 6
; 
; // set video mode to 320x200 256 color mode
; Set_Video_Mode(VGA256);
; Line 59
	*** 000026	6a 13 			push	OFFSET 19
	*** 000028	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 00002d	83 c4 02 		add	sp,OFFSET 2
; cx = 159;
; Line 60
	*** 000030	c7 06 00 00 9f 00 	mov	WORD PTR _cx,OFFSET 159
; cy = 99;
; Line 61
	*** 000036	c7 06 00 00 63 00 	mov	WORD PTR _cy,OFFSET 99
; 
; //draw the color keys
; i=1;
; Line 64
	*** 00003c	c7 46 fa 01 00 		mov	WORD PTR -6[bp],OFFSET 1
; x=0;
; Line 65
	*** 000041	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
; for(i=1; i<=10; i++, x+= 32)
; Line 66
	*** 000046	c7 46 fa 01 00 		mov	WORD PTR -6[bp],OFFSET 1
	*** 00004b	e9 00 00 		jmp	L00502
					L00503:
	*** 00004e	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 000051	83 46 fa 01 		add	WORD PTR -6[bp],OFFSET 1
	*** 000055	83 46 fc 20 		add	WORD PTR -4[bp],OFFSET 32
	*** 000059	8b 46 fc 		mov	ax,WORD PTR -4[bp]
					L00502:
	*** 00005c	83 7e fa 0a 		cmp	WORD PTR -6[bp],OFFSET 10
	*** 000060	7e 03 e9 00 00 		jg	L00504
; {
; Line 67
;     draw_swatch(x, 192, color[i%10]);
; Line 68
	*** 000065	b9 0a 00 		mov	cx,OFFSET 10
	*** 000068	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 00006b	99 			cwd
	*** 00006c	f7 f9 			idiv	cx
	*** 00006e	8b da 			mov	bx,dx
	*** 000070	8a 87 28 00 		mov	al,BYTE PTR _color[bx]
	*** 000074	25 ff 00 		and	ax,OFFSET 255
	*** 000077	50 			push	ax
	*** 000078	68 c0 00 		push	OFFSET 192
	*** 00007b	ff 76 fc 		push	WORD PTR -4[bp]
	*** 00007e	9a 00 00 00 00 		call	FAR PTR _draw_swatch
	*** 000083	83 c4 06 		add	sp,OFFSET 6
; }
; Line 69
; Line 69
	*** 000086	e9 c5 ff 		jmp	L00503
					L00504:
; Blit_String(0, 192, 0x07, "  1   2   3   4   5   6   7   8   9   0", 1);
; Line 70
	*** 000089	6a 01 			push	OFFSET 1
	*** 00008b	68 00 00 		push	OFFSET L00506
	*** 00008e	6a 07 			push	OFFSET 7
	*** 000090	68 c0 00 		push	OFFSET 192
	*** 000093	6a 00 			push	OFFSET 0
	*** 000095	9a 00 00 00 00 		call	FAR PTR _Blit_String
	*** 00009a	83 c4 0a 		add	sp,OFFSET 10
; 
; while(!done) {
; Line 72
	*** 00009d	e9 00 00 		jmp	L00510
					L00507:
;     Delay(1);
; Line 73
	*** 0000a0	6a 01 			push	OFFSET 1
	*** 0000a2	9a 00 00 00 00 		call	FAR PTR _Delay
	*** 0000a7	83 c4 02 		add	sp,OFFSET 2
; }
; Line 74
					L00508:
; Line 74
					L00510:
	*** 0000aa	83 3e 34 00 00 		cmp	WORD PTR _done,OFFSET 0
	*** 0000af	75 03 e9 ec ff 		je	L00507
					L00509:
; 
; // replace old ISR
; _dos_setvect(KEYBOARD_INT, Old_Isr);
; Line 77
	*** 0000b4	ff 76 f8 		push	WORD PTR -8[bp]
	*** 0000b7	ff 76 f6 		push	WORD PTR -10[bp]
	*** 0000ba	6a 09 			push	OFFSET 9
	*** 0000bc	9a 00 00 00 00 		call	FAR PTR __dos_setvect
	*** 0000c1	83 c4 06 		add	sp,OFFSET 6
; 
; // reset back set video mode to 320x200 256 color mode
; Set_Video_Mode(TEXT_MODE);
; Line 80
	*** 0000c4	6a 03 			push	OFFSET 3
	*** 0000c6	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 0000cb	83 c4 02 		add	sp,OFFSET 2
; }
; Line 81
; Line 81
					L00498:
	*** 0000ce	5f 			pop	di
	*** 0000cf	5e 			pop	si
	*** 0000d0	c9 			leave
	*** 0000d1	cb 			ret	OFFSET 0
Local Size: 10
; Line 0
; 
; 
; void _interrupt _far New_Key_Int(void)
; {
; int raw_key;
; 
; // I'm in the mood for some inline!
; 
; _asm
;    {
;    sti                    ; re-enable interrupts
;    in al, KEY_BUFFER      ; get the key that was pressed
;    xor ah,ah              ; zero out upper 8 bits of AX
;    mov raw_key, ax        ; store the key in global
;    in al, KEY_CONTROL     ; set the control register
;    or al, 82h             ; set the proper bits to reset the FF
;    out KEY_CONTROL,al     ; send the new data back to the control register
;    and al,7fh
;    out KEY_CONTROL,al     ; complete the reset
;    mov al,20h
;    out INT_CONTROL,al     ; re-enable interrupts
;                           ; when this baby hits 88 mph, your gonna see
;                           ; some serious @#@#$%
; 
;    } // end inline assembly
; 
; //respond to the key presses
; if(raw_key == ESC_KEY) {
;     done = 1;
; } else if(raw_key >= ONE_KEY && raw_key <= ZERO_KEY) {
;     //convert to index
;     raw_key -= ONE_KEY;
;     raw_key++;
;     if(raw_key == 10) { raw_key = 0; }
; 
;     //select the color
;     cur_color = color[raw_key];
; } else if( raw_key == KEY_UP) {
;     cy--;
; } else if( raw_key == KEY_DOWN) {
;     cy++;
; } else if( raw_key == KEY_LEFT) {
;     cx--;
; } else if( raw_key == KEY_RIGHT) {
;     cx++;
; }
; 
; //draw after each keypress
; Plot_Pixel_Fast(cx, cy, cur_color);
; } // end New_Key_Int
; 
; 
; void draw_swatch(int x, int y, unsigned char color)
; {
;     int right=x+32;
;     int bottom=y+8;
;     int py;
; 
;     for(x; x<right; x++) {
; 	for(py=y; py<bottom; py++) {
; 	    Plot_Pixel_Fast(x, py, color);
; 	}
;     }
; }
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; Line 85
					_New_Key_Int:
	*** 0000d2	60 			pusha
	*** 0000d3	1e 			push	ds
	*** 0000d4	06 			push	es
	*** 0000d5	8b ec 			mov	bp,sp
	*** 0000d7	81 ec 00 00 		sub	sp,OFFSET L00544
	*** 0000db	1e 			push	ds
	*** 0000dc	b8 00 00 		mov	ax,SEG con0
	*** 0000df	8e d8 			mov	ds,ax
	*** 0000e1	fc 			cld
; raw_key = fffc
; ; Line 86
; ; ; ; ; Line 90
; ; Line 91
; ; Line 92
	*** 0000e2	fb 			sti
; ; Line 93
	*** 0000e3	e4 60 			in	OFFSET 96
; ; Line 94
	*** 0000e5	32 e4 			xor	ah,ah
; ; Line 95
	*** 0000e7	89 46 fc 		mov	WORD PTR -4[bp],ax
; ; Line 96
	*** 0000ea	e4 61 			in	OFFSET 97
; ; Line 97
	*** 0000ec	0c 82 			or	al,OFFSET 130
; ; Line 98
	*** 0000ee	e6 61 			out	OFFSET 97
; ; Line 99
	*** 0000f0	24 7f 			and	al,OFFSET 127
; ; Line 100
	*** 0000f2	e6 61 			out	OFFSET 97
; ; Line 101
	*** 0000f4	b0 20 			mov	al,OFFSET 32
; ; Line 102
	*** 0000f6	e6 20 			out	OFFSET 32
; ; Line 103
; ; Line 104
; ; ; Line 106
; ; ; ; Line 109
	*** 0000f8	81 7e fc 81 00 		cmp	WORD PTR -4[bp],OFFSET 129
	*** 0000fd	74 03 e9 00 00 		jne	L00513
; ; Line 110
	*** 000102	c7 06 34 00 01 00 	mov	WORD PTR _done,OFFSET 1
; ; Line 111
	*** 000108	e9 00 00 		jmp	L00514
					L00513:
; Line 111
	*** 00010b	83 7e fc 02 		cmp	WORD PTR -4[bp],OFFSET 2
	*** 00010f	7d 03 e9 00 00 		jl	L00515
	*** 000114	83 7e fc 0b 		cmp	WORD PTR -4[bp],OFFSET 11
	*** 000118	7e 03 e9 00 00 		jg	L00515
; ; ; Line 113
	*** 00011d	83 6e fc 02 		sub	WORD PTR -4[bp],OFFSET 2
; ; Line 114
	*** 000121	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
; ; Line 115
	*** 000125	83 7e fc 0a 		cmp	WORD PTR -4[bp],OFFSET 10
	*** 000129	74 03 e9 00 00 		jne	L00516
	*** 00012e	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
; ; ; ; Line 118
					L00516:
	*** 000133	8b 5e fc 		mov	bx,WORD PTR -4[bp]
	*** 000136	8a 87 28 00 		mov	al,BYTE PTR _color[bx]
	*** 00013a	25 ff 00 		and	ax,OFFSET 255
	*** 00013d	a3 32 00 		mov	WORD PTR _cur_color,ax
; ; Line 119
	*** 000140	e9 00 00 		jmp	L00517
					L00515:
; Line 119
	*** 000143	83 7e fc 48 		cmp	WORD PTR -4[bp],OFFSET 72
	*** 000147	74 03 e9 00 00 		jne	L00518
; ; Line 120
	*** 00014c	83 2e 00 00 01 		sub	WORD PTR _cy,OFFSET 1
; ; Line 121
	*** 000151	e9 00 00 		jmp	L00519
					L00518:
; Line 121
	*** 000154	83 7e fc 50 		cmp	WORD PTR -4[bp],OFFSET 80
	*** 000158	74 03 e9 00 00 		jne	L00520
; ; Line 122
	*** 00015d	83 06 00 00 01 		add	WORD PTR _cy,OFFSET 1
; ; Line 123
	*** 000162	e9 00 00 		jmp	L00521
					L00520:
; Line 123
	*** 000165	83 7e fc 4b 		cmp	WORD PTR -4[bp],OFFSET 75
	*** 000169	74 03 e9 00 00 		jne	L00522
; ; Line 124
	*** 00016e	83 2e 00 00 01 		sub	WORD PTR _cx,OFFSET 1
; ; Line 125
	*** 000173	e9 00 00 		jmp	L00523
					L00522:
; Line 125
	*** 000176	83 7e fc 4d 		cmp	WORD PTR -4[bp],OFFSET 77
	*** 00017a	74 03 e9 00 00 		jne	L00524
; ; Line 126
	*** 00017f	83 06 00 00 01 		add	WORD PTR _cx,OFFSET 1
; ; Line 127
; ; ; ; Line 130
					L00524:
					L00523:
					L00521:
					L00519:
					L00517:
					L00514:
	*** 000184	ff 36 32 00 		push	WORD PTR _cur_color
	*** 000188	ff 36 00 00 		push	WORD PTR _cy
	*** 00018c	ff 36 00 00 		push	WORD PTR _cx
	*** 000190	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 000195	83 c4 06 		add	sp,OFFSET 6
; ; Line 131
; Line 131
					L00511:
	*** 000198	8b e5 			mov	sp,bp
	*** 00019a	07 			pop	es
	*** 00019b	1f 			pop	ds
	*** 00019c	61 			popa
	*** 00019d	cf 			iret
Local Size: 4
; Line 0
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; Line 135
; x = 0006
; y = 0008
; color = 000a
					_draw_swatch:
	*** 00019e	c8 00 00 00 		enter	OFFSET L00545,OFFSET 0
	*** 0001a2	56 			push	si
	*** 0001a3	57 			push	di
; py = fffc
; right = fffa
; bottom = fff8
; ; Line 136
	*** 0001a4	8b 46 06 		mov	ax,WORD PTR 6[bp]
	*** 0001a7	05 20 00 		add	ax,OFFSET 32
	*** 0001aa	89 46 fa 		mov	WORD PTR -6[bp],ax
; ; Line 137
	*** 0001ad	8b 46 08 		mov	ax,WORD PTR 8[bp]
	*** 0001b0	05 08 00 		add	ax,OFFSET 8
	*** 0001b3	89 46 f8 		mov	WORD PTR -8[bp],ax
; ; Line 138
; ; ; Line 140
	*** 0001b6	e9 00 00 		jmp	L00538
					L00535:
; ; Line 141
	*** 0001b9	8b 46 08 		mov	ax,WORD PTR 8[bp]
	*** 0001bc	89 46 fc 		mov	WORD PTR -4[bp],ax
	*** 0001bf	e9 00 00 		jmp	L00542
					L00539:
; ; Line 142
	*** 0001c2	8a 46 0a 		mov	al,BYTE PTR 10[bp]
	*** 0001c5	25 ff 00 		and	ax,OFFSET 255
	*** 0001c8	50 			push	ax
	*** 0001c9	ff 76 fc 		push	WORD PTR -4[bp]
	*** 0001cc	ff 76 06 		push	WORD PTR 6[bp]
	*** 0001cf	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 0001d4	83 c4 06 		add	sp,OFFSET 6
; ; Line 143
					L00540:
; Line 143
	*** 0001d7	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
					L00542:
	*** 0001db	8b 46 f8 		mov	ax,WORD PTR -8[bp]
	*** 0001de	39 46 fc 		cmp	WORD PTR -4[bp],ax
	*** 0001e1	7d 03 e9 dc ff 		jl	L00539
					L00541:
; ; Line 144
					L00536:
; Line 144
	*** 0001e6	83 46 06 01 		add	WORD PTR 6[bp],OFFSET 1
					L00538:
	*** 0001ea	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 0001ed	39 46 06 		cmp	WORD PTR 6[bp],ax
	*** 0001f0	7d 03 e9 c4 ff 		jl	L00535
					L00537:
; ; Line 145
; Line 145
					L00531:
	*** 0001f5	5f 			pop	di
	*** 0001f6	5e 			pop	si
	*** 0001f7	c9 			leave
	*** 0001f8	cb 			ret	OFFSET 0
Local Size: 8
; Line 0
