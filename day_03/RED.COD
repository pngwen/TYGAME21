; File red.c
; 
; // I N C L U D E S ///////////////////////////////////////////////////////////
; 
; #include <stdio.h>
; #include <stdlib.h>
; #include <conio.h>
; 
; #include "graph3.h" // this is all we need to include so that the program
;                     // knows all the #defines, structures, prototypes etc.
; 
; // M A I N ///////////////////////////////////////////////////////////////////
; 
; void main(void)
; {
; Line 14
					_main:
	*** 000000	c8 00 00 00 		enter	OFFSET L00392,OFFSET 0
	*** 000004	56 			push	si
	*** 000005	57 			push	di
; fade = fffc
; y = fffa
; orig = fff6
; x = fff4
; cur = fff0
; done = ffee
; RGB_color orig;  //The original red color
; Line 15
; RGB_color cur;   //The current red color
; Line 16
; int done=0; // exit flag
; Line 17
	*** 000006	c7 46 ee 00 00 		mov	WORD PTR -18[bp],OFFSET 0
; int fade=-1;
; Line 18
	*** 00000b	c7 46 fc ff ff 		mov	WORD PTR -4[bp],OFFSET -1
; int x,y;
; Line 19
; 
; // set video mode to 320x200 256 color mode
; Set_Video_Mode(VGA256);
; Line 22
	*** 000010	6a 13 			push	OFFSET 19
	*** 000012	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 000017	83 c4 02 		add	sp,OFFSET 2
; 
; //extract the color
; Get_Palette_Register(0x0c, &orig);
; Line 25
	*** 00001a	8d 46 f6 		lea	ax,WORD PTR -10[bp]
	*** 00001d	50 			push	ax
	*** 00001e	6a 0c 			push	OFFSET 12
	*** 000020	9a 00 00 00 00 		call	FAR PTR _Get_Palette_Register
	*** 000025	83 c4 04 		add	sp,OFFSET 4
; cur = orig;
; Line 26
	*** 000028	8d 76 f6 		lea	si,WORD PTR -10[bp]
	*** 00002b	8d 7e f0 		lea	di,WORD PTR -16[bp]
	*** 00002e	16 			push	ss
	*** 00002f	07 			pop	es
	*** 000030	a5 			movs
	*** 000031	a4 			movs
; 
; //plot the pixel
; Plot_Pixel_Fast(158,98,0x0c);
; Line 29
	*** 000032	6a 0c 			push	OFFSET 12
	*** 000034	6a 62 			push	OFFSET 98
	*** 000036	68 9e 00 		push	OFFSET 158
	*** 000039	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 00003e	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(159,98,0x0c);
; Line 30
	*** 000041	6a 0c 			push	OFFSET 12
	*** 000043	6a 62 			push	OFFSET 98
	*** 000045	68 9f 00 		push	OFFSET 159
	*** 000048	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 00004d	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(160,98,0x0c);
; Line 31
	*** 000050	6a 0c 			push	OFFSET 12
	*** 000052	6a 62 			push	OFFSET 98
	*** 000054	68 a0 00 		push	OFFSET 160
	*** 000057	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 00005c	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(158,99,0x0c);
; Line 32
	*** 00005f	6a 0c 			push	OFFSET 12
	*** 000061	6a 63 			push	OFFSET 99
	*** 000063	68 9e 00 		push	OFFSET 158
	*** 000066	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 00006b	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(159,99,0x0c);
; Line 33
	*** 00006e	6a 0c 			push	OFFSET 12
	*** 000070	6a 63 			push	OFFSET 99
	*** 000072	68 9f 00 		push	OFFSET 159
	*** 000075	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 00007a	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(160,99,0x0c);
; Line 34
	*** 00007d	6a 0c 			push	OFFSET 12
	*** 00007f	6a 63 			push	OFFSET 99
	*** 000081	68 a0 00 		push	OFFSET 160
	*** 000084	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 000089	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(158,100,0x0c);
; Line 35
	*** 00008c	6a 0c 			push	OFFSET 12
	*** 00008e	6a 64 			push	OFFSET 100
	*** 000090	68 9e 00 		push	OFFSET 158
	*** 000093	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 000098	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(159,100,0x0c);
; Line 36
	*** 00009b	6a 0c 			push	OFFSET 12
	*** 00009d	6a 64 			push	OFFSET 100
	*** 00009f	68 9f 00 		push	OFFSET 159
	*** 0000a2	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 0000a7	83 c4 06 		add	sp,OFFSET 6
; Plot_Pixel_Fast(160,100,0x0c);
; Line 37
	*** 0000aa	6a 0c 			push	OFFSET 12
	*** 0000ac	6a 64 			push	OFFSET 100
	*** 0000ae	68 a0 00 		push	OFFSET 160
	*** 0000b1	9a 00 00 00 00 		call	FAR PTR _Plot_Pixel_Fast
	*** 0000b6	83 c4 06 		add	sp,OFFSET 6
; 
; // wait for user to hit a key
; 
; while(!done) {
; Line 41
	*** 0000b9	e9 00 00 		jmp	L00385
					L00382:
;   //fade the color
;   if(fade < 0 && (!cur.red || !cur.green || !cur.blue)) {
; Line 43
	*** 0000bc	83 7e fc 00 		cmp	WORD PTR -4[bp],OFFSET 0
	*** 0000c0	7c 03 e9 00 00 		jge	L00386
	*** 0000c5	8a 46 f0 		mov	al,BYTE PTR -16[bp]
	*** 0000c8	25 ff 00 		and	ax,OFFSET 255
	*** 0000cb	3d 00 00 		cmp	ax,OFFSET 0
	*** 0000ce	75 03 e9 00 00 		je	L00387
	*** 0000d3	8a 46 f1 		mov	al,BYTE PTR -15[bp]
	*** 0000d6	25 ff 00 		and	ax,OFFSET 255
	*** 0000d9	3d 00 00 		cmp	ax,OFFSET 0
	*** 0000dc	75 03 e9 00 00 		je	L00387
	*** 0000e1	8a 46 f2 		mov	al,BYTE PTR -14[bp]
	*** 0000e4	25 ff 00 		and	ax,OFFSET 255
	*** 0000e7	3d 00 00 		cmp	ax,OFFSET 0
	*** 0000ea	74 03 e9 00 00 		jne	L00386
					L00387:
;     fade = 1;
; Line 44
	*** 0000ef	c7 46 fc 01 00 		mov	WORD PTR -4[bp],OFFSET 1
;   } else if(cur.red == orig.red || cur.green == orig.green || cur.blue == orig.blue) {
; Line 45
	*** 0000f4	e9 00 00 		jmp	L00388
					L00386:
; Line 45
	*** 0000f7	8a 46 f0 		mov	al,BYTE PTR -16[bp]
	*** 0000fa	25 ff 00 		and	ax,OFFSET 255
	*** 0000fd	89 46 ec 		mov	WORD PTR -20[bp],ax
	*** 000100	8a 46 f6 		mov	al,BYTE PTR -10[bp]
	*** 000103	25 ff 00 		and	ax,OFFSET 255
	*** 000106	8b 4e ec 		mov	cx,WORD PTR -20[bp]
	*** 000109	3b c8 			cmp	cx,ax
	*** 00010b	75 03 e9 00 00 		je	L00390
	*** 000110	8a 46 f1 		mov	al,BYTE PTR -15[bp]
	*** 000113	25 ff 00 		and	ax,OFFSET 255
	*** 000116	89 46 ec 		mov	WORD PTR -20[bp],ax
	*** 000119	8a 46 f7 		mov	al,BYTE PTR -9[bp]
	*** 00011c	25 ff 00 		and	ax,OFFSET 255
	*** 00011f	8b 4e ec 		mov	cx,WORD PTR -20[bp]
	*** 000122	3b c8 			cmp	cx,ax
	*** 000124	75 03 e9 00 00 		je	L00390
	*** 000129	8a 46 f2 		mov	al,BYTE PTR -14[bp]
	*** 00012c	25 ff 00 		and	ax,OFFSET 255
	*** 00012f	89 46 ec 		mov	WORD PTR -20[bp],ax
	*** 000132	8a 46 f8 		mov	al,BYTE PTR -8[bp]
	*** 000135	25 ff 00 		and	ax,OFFSET 255
	*** 000138	8b 4e ec 		mov	cx,WORD PTR -20[bp]
	*** 00013b	3b c8 			cmp	cx,ax
	*** 00013d	74 03 e9 00 00 		jne	L00389
					L00390:
;     fade = -1;
; Line 46
	*** 000142	c7 46 fc ff ff 		mov	WORD PTR -4[bp],OFFSET -1
;   }
; Line 47
;   cur.red += fade;
; Line 48
					L00389:
					L00388:
	*** 000147	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00014a	00 46 f0 		add	BYTE PTR -16[bp],al
;   cur.blue += fade;
; Line 49
	*** 00014d	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000150	00 46 f2 		add	BYTE PTR -14[bp],al
;   cur.green += fade;
; Line 50
	*** 000153	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000156	00 46 f1 		add	BYTE PTR -15[bp],al
;   Set_Palette_Register(0x0c, &cur);
; Line 51
	*** 000159	8d 46 f0 		lea	ax,WORD PTR -16[bp]
	*** 00015c	50 			push	ax
	*** 00015d	6a 0c 			push	OFFSET 12
	*** 00015f	9a 00 00 00 00 		call	FAR PTR _Set_Palette_Register
	*** 000164	83 c4 04 		add	sp,OFFSET 4
; 
;   // Check for keyboard
;   if(kbhit()) {
; Line 54
	*** 000167	9a 00 00 00 00 		call	FAR PTR _kbhit
	*** 00016c	3d 00 00 		cmp	ax,OFFSET 0
	*** 00016f	75 03 e9 00 00 		je	L00391
;     done = 1;
; Line 55
	*** 000174	c7 46 ee 01 00 		mov	WORD PTR -18[bp],OFFSET 1
;   }
; Line 56
;   Delay(1);
; Line 57
					L00391:
	*** 000179	6a 01 			push	OFFSET 1
	*** 00017b	9a 00 00 00 00 		call	FAR PTR _Delay
	*** 000180	83 c4 02 		add	sp,OFFSET 2
; }
; Line 58
					L00383:
; Line 58
					L00385:
	*** 000183	83 7e ee 00 		cmp	WORD PTR -18[bp],OFFSET 0
	*** 000187	75 03 e9 30 ff 		je	L00382
					L00384:
; 
; // reset back set video mode to 320x200 256 color mode
; 
; Set_Video_Mode(TEXT_MODE);
; Line 62
	*** 00018c	6a 03 			push	OFFSET 3
	*** 00018e	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 000193	83 c4 02 		add	sp,OFFSET 2
; 
; } // end main
; Line 64
; Line 64
					L00375:
	*** 000196	5f 			pop	di
	*** 000197	5e 			pop	si
	*** 000198	c9 			leave
	*** 000199	cb 			ret	OFFSET 0
Local Size: 20
; Line 0
