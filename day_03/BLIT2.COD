; File blit2.c
; // I N C L U D E S ///////////////////////////////////////////////////////////
; 
; #include <stdio.h>
; #include <stdlib.h>
; #include <conio.h>
; 
; #include "graph3.h" // this is all we need to include so that the program
;                     // knows all the #defines, structures, prototypes etc.
; 
; // P R O T O T Y P E S ///////////////////////////////////////////////////////
; void Blit2_Char(int xc,int yc,char c,int color1, int color2, int trans_flag);
; void Blit2_String(int x,int y,int color1, int color2, char *string,int trans_flag);
; 
; // M A I N ///////////////////////////////////////////////////////////////////
; int main()
; {
; Line 16
					_main:
	*** 000000	c8 00 00 00 		enter	OFFSET L00457,OFFSET 0
	*** 000004	56 			push	si
	*** 000005	57 			push	di
; 
; // set video mode to 320x200 256 color mode
; Set_Video_Mode(VGA256);
; Line 19
	*** 000006	6a 13 			push	OFFSET 19
	*** 000008	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 00000d	83 c4 02 		add	sp,OFFSET 2
; 
; //draw a string
; Blit2_String(42, 99, 0x07, 0x0c, "Hello, World", 1);
; Line 22
	*** 000010	6a 01 			push	OFFSET 1
	*** 000012	68 00 00 		push	OFFSET L00402
	*** 000015	6a 0c 			push	OFFSET 12
	*** 000017	6a 07 			push	OFFSET 7
	*** 000019	6a 63 			push	OFFSET 99
	*** 00001b	6a 2a 			push	OFFSET 42
	*** 00001d	9a 00 00 00 00 		call	FAR PTR _Blit2_String
	*** 000022	83 c4 0c 		add	sp,OFFSET 12
; 
; // wait for a key to be pressed
; while(!kbhit()) { }
; Line 25
					L00404:
	*** 000025	9a 00 00 00 00 		call	FAR PTR _kbhit
	*** 00002a	3d 00 00 		cmp	ax,OFFSET 0
	*** 00002d	74 03 e9 00 00 		jne	L00405
; Line 25
	*** 000032	e9 f0 ff 		jmp	L00404
					L00405:
; 
; Set_Video_Mode(TEXT_MODE);
; Line 27
	*** 000035	6a 03 			push	OFFSET 3
	*** 000037	9a 00 00 00 00 		call	FAR PTR _Set_Video_Mode
	*** 00003c	83 c4 02 		add	sp,OFFSET 2
; }
; Line 28
; Line 28
					L00401:
	*** 00003f	5f 			pop	di
	*** 000040	5e 			pop	si
	*** 000041	c9 			leave
	*** 000042	cb 			ret	OFFSET 0
Local Size: 2
; Line 0
; 
; // F U N C T I O N S /////////////////////////////////////////////////////////
; void Blit2_Char(int xc,int yc,char c,int color1, int color2, int trans_flag)
; {
; // this function uses the rom 8x8 character set to blit a character on the
; // video screen, notice the trick used to extract bits out of each character
; // byte that comprises a line
; int color = color1;
; 
; int offset,x,y;
; char far *work_char;
; unsigned char bit_mask = 0x80;
; 
; // compute starting offset in rom character lookup table
; 
; work_char = rom_char_set + c * CHAR_HEIGHT;
; 
; // compute offset of character in video buffer
; 
; offset = (yc << 8) + (yc << 6) + xc;
; 
; for (y=0; y<CHAR_HEIGHT; y++)
;     {
;     //select the color
;     if(y%2) {
; 	color = color1;
;     } else {
; 	color = color2;
;     }
;     // reset bit mask
;     bit_mask = 0x80;
; 
; Line 32
; xc = 0006
; yc = 0008
; c = 000a
; color1 = 000c
; color2 = 000e
; trans_flag = 0010
					_Blit2_Char:
	*** 000044	c8 00 00 00 		enter	OFFSET L00458,OFFSET 0
	*** 000048	56 			push	si
	*** 000049	57 			push	di
; y = fffc
; color = fffa
; work_char = fff6
; x = fff4
; offset = fff2
; bit_mask = fff0
;     for (x=0; x<CHAR_WIDTH; x++)
;         {
;         // test for transparent pixel i.e. 0, if not transparent then draw
; 
; Line 36
	*** 00004a	8b 46 0c 		mov	ax,WORD PTR 12[bp]
	*** 00004d	89 46 fa 		mov	WORD PTR -6[bp],ax
;         if ((*work_char & bit_mask))
;              video_buffer[offset+x] = color;
; Line 38
; 
; Line 39
;         else if (!trans_flag)  // takes care of transparency
; Line 40
	*** 000050	c6 46 f0 80 		mov	BYTE PTR -16[bp],OFFSET 128
;             video_buffer[offset+x] = 0;
; 
;         // shift bit mask
; 
; Line 44
	*** 000054	8a 46 0a 		mov	al,BYTE PTR 10[bp]
	*** 000057	98 			cbw
	*** 000058	d1 e0 			shl	ax,OFFSET 1
	*** 00005a	d1 e0 			shl	ax,OFFSET 1
	*** 00005c	d1 e0 			shl	ax,OFFSET 1
	*** 00005e	8b 0e 00 00 		mov	cx,WORD PTR _rom_char_set
	*** 000062	8b 16 02 00 		mov	dx,WORD PTR _rom_char_set+2
	*** 000066	03 c8 			add	cx,ax
	*** 000068	89 4e f6 		mov	WORD PTR -10[bp],cx
	*** 00006b	89 56 f8 		mov	WORD PTR -8[bp],dx
;         bit_mask = (bit_mask>>1);
; 
;         } // end for x
; 
; Line 48
	*** 00006e	8b 46 08 		mov	ax,WORD PTR 8[bp]
	*** 000071	c1 e0 06 		shl	ax,OFFSET 6
	*** 000074	8b 56 08 		mov	dx,WORD PTR 8[bp]
	*** 000077	c1 e2 08 		shl	dx,OFFSET 8
	*** 00007a	03 d0 			add	dx,ax
	*** 00007c	03 56 06 		add	dx,WORD PTR 6[bp]
	*** 00007f	89 56 f2 		mov	WORD PTR -14[bp],dx
;     // move to next line in video buffer and in rom character data area
; 
; Line 50
	*** 000082	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
	*** 000087	e9 00 00 		jmp	L00429
					L00426:
;     offset      += SCREEN_WIDTH;
; Line 51
;     work_char++;
; 
; Line 53
	*** 00008a	b9 02 00 		mov	cx,OFFSET 2
	*** 00008d	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000090	99 			cwd
	*** 000091	f7 f9 			idiv	cx
	*** 000093	83 fa 00 		cmp	dx,OFFSET 0
	*** 000096	75 03 e9 00 00 		je	L00430
;     } // end for y
; Line 54
	*** 00009b	8b 46 0c 		mov	ax,WORD PTR 12[bp]
	*** 00009e	89 46 fa 		mov	WORD PTR -6[bp],ax
; 
; Line 55
	*** 0000a1	e9 00 00 		jmp	L00431
					L00430:
; Line 55
; } // end Blit_Char
; Line 56
	*** 0000a4	8b 46 0e 		mov	ax,WORD PTR 14[bp]
	*** 0000a7	89 46 fa 		mov	WORD PTR -6[bp],ax
; 
; Line 57
					L00431:
; //////////////////////////////////////////////////////////////////////////////
; 
; Line 59
	*** 0000aa	c6 46 f0 80 		mov	BYTE PTR -16[bp],OFFSET 128
; void Blit2_String(int x,int y,int color1, int color2, char *string,int trans_flag)
; {
; Line 61
	*** 0000ae	c7 46 f4 00 00 		mov	WORD PTR -12[bp],OFFSET 0
	*** 0000b3	e9 00 00 		jmp	L00435
					L00432:
; // this function blits an entire string on the screen with fixed spacing
; Line 62
; // between each character.  it calls blit_char.
; 
; int index;
; Line 65
	*** 0000b6	8a 46 f0 		mov	al,BYTE PTR -16[bp]
	*** 0000b9	25 ff 00 		and	ax,OFFSET 255
	*** 0000bc	c4 5e f6 		les	bx,WORD PTR -10[bp]
	*** 0000bf	26 8a 0f 		mov	cl,BYTE PTR es:[bx]
	*** 0000c2	89 46 ee 		mov	WORD PTR -18[bp],ax
	*** 0000c5	8b c1 			mov	ax,cx
	*** 0000c7	98 			cbw
	*** 0000c8	8b 4e ee 		mov	cx,WORD PTR -18[bp]
	*** 0000cb	23 c1 			and	ax,cx
	*** 0000cd	3d 00 00 		cmp	ax,OFFSET 0
	*** 0000d0	75 03 e9 00 00 		je	L00436
; 
; Line 66
	*** 0000d5	8b 46 fa 		mov	ax,WORD PTR -6[bp]
	*** 0000d8	8b 4e f2 		mov	cx,WORD PTR -14[bp]
	*** 0000db	03 4e f4 		add	cx,WORD PTR -12[bp]
	*** 0000de	8b 1e 00 00 		mov	bx,WORD PTR _video_buffer
	*** 0000e2	8b 36 02 00 		mov	si,WORD PTR _video_buffer+2
	*** 0000e6	03 d9 			add	bx,cx
	*** 0000e8	8e c6 			mov	es,si
	*** 0000ea	26 88 07 		mov	BYTE PTR es:[bx],al
; for (index=0; string[index]!=0; index++)
;      {
; Line 68
	*** 0000ed	e9 00 00 		jmp	L00437
					L00436:
; Line 68
	*** 0000f0	83 7e 10 00 		cmp	WORD PTR 16[bp],OFFSET 0
	*** 0000f4	74 03 e9 00 00 		jne	L00438
; 
; Line 69
	*** 0000f9	8b 46 f2 		mov	ax,WORD PTR -14[bp]
	*** 0000fc	03 46 f4 		add	ax,WORD PTR -12[bp]
	*** 0000ff	8b 1e 00 00 		mov	bx,WORD PTR _video_buffer
	*** 000103	8b 0e 02 00 		mov	cx,WORD PTR _video_buffer+2
	*** 000107	03 d8 			add	bx,ax
	*** 000109	8e c1 			mov	es,cx
	*** 00010b	26 c6 07 00 		mov	BYTE PTR es:[bx],OFFSET 0
;      Blit2_Char(x+(index<<3),y,string[index],color1,color2,trans_flag);
; 
;      } /* end while */
; 
; Line 73
					L00438:
					L00437:
	*** 00010f	8a 46 f0 		mov	al,BYTE PTR -16[bp]
	*** 000112	25 ff 00 		and	ax,OFFSET 255
	*** 000115	d1 f8 			sar	ax,OFFSET 1
	*** 000117	88 46 f0 		mov	BYTE PTR -16[bp],al
; } /* end Blit_String */
; ; Line 75
					L00433:
; Line 75
	*** 00011a	83 46 f4 01 		add	WORD PTR -12[bp],OFFSET 1
					L00435:
	*** 00011e	83 7e f4 08 		cmp	WORD PTR -12[bp],OFFSET 8
	*** 000122	7d 03 e9 8f ff 		jl	L00432
					L00434:
; ; ; ; ; Line 79
	*** 000127	81 46 f2 40 01 		add	WORD PTR -14[bp],OFFSET 320
; ; Line 80
	*** 00012c	83 46 f6 01 		add	WORD PTR -10[bp],OFFSET 1
; ; ; Line 82
					L00427:
; Line 82
	*** 000130	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
					L00429:
	*** 000134	83 7e fc 08 		cmp	WORD PTR -4[bp],OFFSET 8
	*** 000138	7d 03 e9 4d ff 		jl	L00426
					L00428:
; ; ; Line 84
; Line 84
					L00419:
	*** 00013d	5f 			pop	di
	*** 00013e	5e 			pop	si
	*** 00013f	c9 			leave
	*** 000140	cb 			ret	OFFSET 0
Local Size: 18
; Line 0
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; Line 89
; x = 0006
; y = 0008
; color1 = 000a
; color2 = 000c
; string = 000e
; trans_flag = 0010
					_Blit2_String:
	*** 000142	c8 00 00 00 		enter	OFFSET L00459,OFFSET 0
	*** 000146	56 			push	si
	*** 000147	57 			push	di
; index = fffc
; ; ; ; ; Line 93
; ; ; Line 95
	*** 000148	c7 46 fc 00 00 		mov	WORD PTR -4[bp],OFFSET 0
	*** 00014d	e9 00 00 		jmp	L00453
					L00454:
	*** 000150	83 46 fc 01 		add	WORD PTR -4[bp],OFFSET 1
					L00453:
	*** 000154	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000157	8b 5e 0e 		mov	bx,WORD PTR 14[bp]
	*** 00015a	03 d8 			add	bx,ax
	*** 00015c	80 3f 00 		cmp	BYTE PTR [bx],OFFSET 0
	*** 00015f	75 03 e9 00 00 		je	L00455
; ; Line 96
; ; ; Line 98
	*** 000164	ff 76 10 		push	WORD PTR 16[bp]
	*** 000167	ff 76 0c 		push	WORD PTR 12[bp]
	*** 00016a	ff 76 0a 		push	WORD PTR 10[bp]
	*** 00016d	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 000170	8b 5e 0e 		mov	bx,WORD PTR 14[bp]
	*** 000173	03 d8 			add	bx,ax
	*** 000175	8a 07 			mov	al,BYTE PTR [bx]
	*** 000177	98 			cbw
	*** 000178	50 			push	ax
	*** 000179	ff 76 08 		push	WORD PTR 8[bp]
	*** 00017c	8b 46 fc 		mov	ax,WORD PTR -4[bp]
	*** 00017f	d1 e0 			shl	ax,OFFSET 1
	*** 000181	d1 e0 			shl	ax,OFFSET 1
	*** 000183	d1 e0 			shl	ax,OFFSET 1
	*** 000185	03 46 06 		add	ax,WORD PTR 6[bp]
	*** 000188	50 			push	ax
	*** 000189	9a 00 00 00 00 		call	FAR PTR _Blit2_Char
	*** 00018e	83 c4 0c 		add	sp,OFFSET 12
; ; ; Line 100
; Line 100
	*** 000191	e9 bc ff 		jmp	L00454
					L00455:
; ; ; Line 102
; Line 102
					L00451:
	*** 000194	5f 			pop	di
	*** 000195	5e 			pop	si
	*** 000196	c9 			leave
	*** 000197	cb 			ret	OFFSET 0
Local Size: 4
; Line 0
